import { defineComponent as u, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as V, unref as t, renderSlot as v, createCommentVNode as Z, createElementVNode as s } from "vue";
const y = ["width", "height", "fill", "transform"], M = { key: 0 }, A = /* @__PURE__ */ s("path", { d: "M236,56V200a12,12,0,0,1-24,0V56a12,12,0,0,1,24,0ZM196,96v64a20,20,0,0,1-20,20H32a20,20,0,0,1-20-20V96A20,20,0,0,1,32,76H176A20,20,0,0,1,196,96Zm-24,4H36v56H172Z" }, null, -1), f = [
  A
], w = { key: 1 }, k = /* @__PURE__ */ s("path", {
  d: "M192,96v64a8,8,0,0,1-8,8H32a8,8,0,0,1-8-8V96a8,8,0,0,1,8-8H184A8,8,0,0,1,192,96Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ s("path", { d: "M232,56V200a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0ZM200,96v64a16,16,0,0,1-16,16H32a16,16,0,0,1-16-16V96A16,16,0,0,1,32,80H184A16,16,0,0,1,200,96Zm-16,0H32v64H184Z" }, null, -1), x = [
  k,
  S
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M232,56V200a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0ZM184,80H32A16,16,0,0,0,16,96v64a16,16,0,0,0,16,16H184a16,16,0,0,0,16-16V96A16,16,0,0,0,184,80Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M230,56V200a6,6,0,0,1-12,0V56a6,6,0,0,1,12,0ZM198,96v64a14,14,0,0,1-14,14H32a14,14,0,0,1-14-14V96A14,14,0,0,1,32,82H184A14,14,0,0,1,198,96Zm-12,0a2,2,0,0,0-2-2H32a2,2,0,0,0-2,2v64a2,2,0,0,0,2,2H184a2,2,0,0,0,2-2Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M232,56V200a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0ZM200,96v64a16,16,0,0,1-16,16H32a16,16,0,0,1-16-16V96A16,16,0,0,1,32,80H184A16,16,0,0,1,200,96Zm-16,0H32v64H184Z" }, null, -1), $ = [
  W
], j = { key: 5 }, R = /* @__PURE__ */ s("path", { d: "M228,56V200a4,4,0,0,1-8,0V56a4,4,0,0,1,8,0ZM196,96v64a12,12,0,0,1-12,12H32a12,12,0,0,1-12-12V96A12,12,0,0,1,32,84H184A12,12,0,0,1,196,96Zm-8,0a4,4,0,0,0-4-4H32a4,4,0,0,0-4,4v64a4,4,0,0,0,4,4H184a4,4,0,0,0,4-4Z" }, null, -1), q = [
  R
], D = {
  name: "PhAlignRightSimple"
}, I = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const a = l, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), m = i("mirrored", !1), n = r(() => a.weight ?? _), d = r(() => a.size ?? h), g = r(() => a.color ?? p), H = r(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : m ? "scale(-1, 1)" : void 0);
    return (c, F) => (o(), e("svg", V({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(g),
      transform: t(H)
    }, c.$attrs), [
      v(c.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", M, f)) : t(n) === "duotone" ? (o(), e("g", w, x)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, q)) : Z("", !0)
    ], 16, y));
  }
});
export {
  I as default
};
