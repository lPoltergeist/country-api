import { defineComponent as y, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as A, unref as t, renderSlot as f, createCommentVNode as H, createElementVNode as s } from "vue";
const Z = ["width", "height", "fill", "transform"], v = { key: 0 }, w = /* @__PURE__ */ s("path", { d: "M132,20A104.11,104.11,0,0,0,28,124v84.33A19.69,19.69,0,0,0,47.67,228H132a104,104,0,0,0,0-208Zm0,184H52V124a80,80,0,1,1,80,80Z" }, null, -1), M = [
  w
], V = { key: 1 }, k = /* @__PURE__ */ s("path", {
  d: "M224,124h0a92,92,0,0,1-92,92H47.67A7.66,7.66,0,0,1,40,208.33V124a92,92,0,0,1,92-92h0A92,92,0,0,1,224,124Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M132,24A100.11,100.11,0,0,0,32,124v84.33A15.69,15.69,0,0,0,47.67,224H132a100,100,0,0,0,0-200Zm0,184H48V124a84,84,0,1,1,84,84Z" }, null, -1), C = [
  k,
  x
], S = { key: 2 }, z = /* @__PURE__ */ s("path", { d: "M232,124A100.11,100.11,0,0,1,132,224H47.67A15.69,15.69,0,0,1,32,208.33V124a100,100,0,0,1,200,0Z" }, null, -1), B = [
  z
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M132,26a98.11,98.11,0,0,0-98,98v84.33A13.68,13.68,0,0,0,47.67,222H132a98,98,0,0,0,0-196Zm0,184H47.67A1.67,1.67,0,0,1,46,208.33V124a86,86,0,1,1,86,86Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M132,24A100.11,100.11,0,0,0,32,124v84.33A15.69,15.69,0,0,0,47.67,224H132a100,100,0,0,0,0-200Zm0,184H48V124a84,84,0,1,1,84,84Z" }, null, -1), $ = [
  W
], j = { key: 5 }, T = /* @__PURE__ */ s("path", { d: "M132,28a96.11,96.11,0,0,0-96,96v84.33A11.68,11.68,0,0,0,47.67,220H132a96,96,0,0,0,0-192Zm0,184H47.67A3.67,3.67,0,0,1,44,208.33V124a88,88,0,1,1,88,88Z" }, null, -1), q = [
  T
], D = {
  name: "PhChatTeardrop"
}, I = /* @__PURE__ */ y({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, h = r("weight", "regular"), _ = r("size", "1em"), p = r("color", "currentColor"), m = r("mirrored", !1), n = d(() => i.weight ?? h), c = d(() => i.size ?? _), g = d(() => i.color ?? p), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : m ? "scale(-1, 1)" : void 0);
    return (a, F) => (o(), e("svg", A({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(g),
      transform: t(u)
    }, a.$attrs), [
      f(a.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", v, M)) : t(n) === "duotone" ? (o(), e("g", V, C)) : t(n) === "fill" ? (o(), e("g", S, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, q)) : H("", !0)
    ], 16, Z));
  }
});
export {
  I as default
};
