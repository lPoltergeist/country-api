import { defineComponent as v, inject as r, computed as a, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as M, createCommentVNode as Z, createElementVNode as s } from "vue";
const f = ["width", "height", "fill", "transform"], w = { key: 0 }, V = /* @__PURE__ */ s("path", { d: "M92,152v48a12,12,0,0,1-24,0V152a12,12,0,0,1,24,0ZM40,180a12,12,0,0,0-12,12v8a12,12,0,0,0,24,0v-8A12,12,0,0,0,40,180Z" }, null, -1), k = [
  V
], A = { key: 1 }, S = /* @__PURE__ */ s("path", {
  d: "M80,140.7V208H32a8,8,0,0,1-5.66-13.66Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M198.12,25.23a16,16,0,0,0-17.44,3.46l-160,160A16,16,0,0,0,32,216H192a16,16,0,0,0,16-16V40A15.94,15.94,0,0,0,198.12,25.23ZM72,160v40H32Zm120,40H88V144L192,40Z" }, null, -1), C = [
  S,
  x
], H = { key: 2 }, z = /* @__PURE__ */ s("path", { d: "M198.12,25.23a16,16,0,0,0-17.44,3.46l-160,160A16,16,0,0,0,32,216H192a16,16,0,0,0,16-16V40A15.94,15.94,0,0,0,198.12,25.23ZM192,200H88V144L192,40Z" }, null, -1), B = [
  z
], L = { key: 3 }, N = /* @__PURE__ */ s("path", { d: "M86,152v48a6,6,0,0,1-12,0V152a6,6,0,0,1,12,0ZM40,186a6,6,0,0,0-6,6v8a6,6,0,0,0,12,0v-8A6,6,0,0,0,40,186Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M88,152v48a8,8,0,0,1-16,0V152a8,8,0,0,1,16,0ZM40,184a8,8,0,0,0-8,8v8a8,8,0,0,0,16,0v-8A8,8,0,0,0,40,184Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M84,152v48a4,4,0,0,1-8,0V152a4,4,0,0,1,8,0ZM40,188a4,4,0,0,0-4,4v8a4,4,0,0,0,8,0v-8A4,4,0,0,0,40,188Z" }, null, -1), q = [
  j
], D = {
  name: "PhCellSignalLow"
}, I = /* @__PURE__ */ v({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = a(() => i.weight ?? _), l = a(() => i.size ?? h), m = a(() => i.color ?? p), u = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      M(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", w, k)) : t(n) === "duotone" ? (o(), e("g", A, C)) : t(n) === "fill" ? (o(), e("g", H, B)) : t(n) === "light" ? (o(), e("g", L, b)) : t(n) === "regular" ? (o(), e("g", E, W)) : t(n) === "thin" ? (o(), e("g", $, q)) : Z("", !0)
    ], 16, f));
  }
});
export {
  I as default
};
