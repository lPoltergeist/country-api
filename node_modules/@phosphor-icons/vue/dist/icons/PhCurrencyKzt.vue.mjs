import { defineComponent as u, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as V, createCommentVNode as M, createElementVNode as s } from "vue";
const Z = ["width", "height", "fill", "transform"], f = { key: 0 }, w = /* @__PURE__ */ s("path", { d: "M212,100a12,12,0,0,1-12,12H140V212a12,12,0,0,1-24,0V112H56a12,12,0,0,1,0-24H200A12,12,0,0,1,212,100ZM56,64H200a12,12,0,0,0,0-24H56a12,12,0,0,0,0,24Z" }, null, -1), k = [
  w
], v = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M200,56V96H56V56Z",
  opacity: "0.2"
}, null, -1), z = /* @__PURE__ */ s("path", { d: "M208,96a8,8,0,0,1-8,8H136V216a8,8,0,0,1-16,0V104H56a8,8,0,0,1,0-16H200A8,8,0,0,1,208,96ZM56,64H200a8,8,0,0,0,0-16H56a8,8,0,0,0,0,16Z" }, null, -1), A = [
  x,
  z
], C = { key: 2 }, S = /* @__PURE__ */ s("path", { d: "M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm48,96H136v72a8,8,0,0,1-16,0V120H80a8,8,0,0,1,0-16h96a8,8,0,0,1,0,16Zm0-32H80a8,8,0,0,1,0-16h96a8,8,0,0,1,0,16Z" }, null, -1), B = [
  S
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M206,96a6,6,0,0,1-6,6H134V216a6,6,0,0,1-12,0V102H56a6,6,0,0,1,0-12H200A6,6,0,0,1,206,96ZM56,62H200a6,6,0,0,0,0-12H56a6,6,0,0,0,0,12Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M208,96a8,8,0,0,1-8,8H136V216a8,8,0,0,1-16,0V104H56a8,8,0,0,1,0-16H200A8,8,0,0,1,208,96ZM56,64H200a8,8,0,0,0,0-16H56a8,8,0,0,0,0,16Z" }, null, -1), $ = [
  W
], j = { key: 5 }, K = /* @__PURE__ */ s("path", { d: "M204,96a4,4,0,0,1-4,4H132V216a4,4,0,0,1-8,0V100H56a4,4,0,0,1,0-8H200A4,4,0,0,1,204,96ZM56,60H200a4,4,0,0,0,0-8H56a4,4,0,0,0,0,8Z" }, null, -1), q = [
  K
], D = {
  name: "PhCurrencyKzt"
}, I = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const a = l, _ = i("weight", "regular"), h = i("size", "1em"), H = i("color", "currentColor"), p = i("mirrored", !1), n = r(() => a.weight ?? _), c = r(() => a.size ?? h), g = r(() => a.color ?? H), m = r(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(g),
      transform: t(m)
    }, d.$attrs), [
      V(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", f, k)) : t(n) === "duotone" ? (o(), e("g", v, A)) : t(n) === "fill" ? (o(), e("g", C, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, q)) : M("", !0)
    ], 16, Z));
  }
});
export {
  I as default
};
