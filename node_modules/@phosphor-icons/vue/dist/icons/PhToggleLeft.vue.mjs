import { defineComponent as u, inject as a, computed as r, openBlock as o, createElementBlock as e, mergeProps as A, unref as t, renderSlot as y, createCommentVNode as M, createElementVNode as s } from "vue";
const f = ["width", "height", "fill", "transform"], H = { key: 0 }, w = /* @__PURE__ */ s("path", { d: "M176,52H80a76,76,0,0,0,0,152h96a76,76,0,0,0,0-152Zm0,128H80A52,52,0,0,1,80,76h96a52,52,0,0,1,0,104ZM80,92a36,36,0,1,0,36,36A36,36,0,0,0,80,92Zm0,48a12,12,0,1,1,12-12A12,12,0,0,1,80,140Z" }, null, -1), k = [
  w
], v = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M112,128A32,32,0,1,1,80,96,32,32,0,0,1,112,128Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ s("path", { d: "M176,56H80a72,72,0,0,0,0,144h96a72,72,0,0,0,0-144Zm0,128H80A56,56,0,0,1,80,72h96a56,56,0,0,1,0,112ZM80,88a40,40,0,1,0,40,40A40,40,0,0,0,80,88Zm0,64a24,24,0,1,1,24-24A24,24,0,0,1,80,152Z" }, null, -1), z = [
  x,
  S
], C = { key: 2 }, B = /* @__PURE__ */ s("path", { d: "M176,56H80a72,72,0,0,0,0,144h96a72,72,0,0,0,0-144ZM80,168a40,40,0,1,1,40-40A40,40,0,0,1,80,168Z" }, null, -1), N = [
  B
], b = { key: 3 }, E = /* @__PURE__ */ s("path", { d: "M176,58H80a70,70,0,0,0,0,140h96a70,70,0,0,0,0-140Zm0,128H80A58,58,0,0,1,80,70h96a58,58,0,0,1,0,116ZM80,90a38,38,0,1,0,38,38A38,38,0,0,0,80,90Zm0,64a26,26,0,1,1,26-26A26,26,0,0,1,80,154Z" }, null, -1), P = [
  E
], V = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M176,56H80a72,72,0,0,0,0,144h96a72,72,0,0,0,0-144Zm0,128H80A56,56,0,0,1,80,72h96a56,56,0,0,1,0,112ZM80,88a40,40,0,1,0,40,40A40,40,0,0,0,80,88Zm0,64a24,24,0,1,1,24-24A24,24,0,0,1,80,152Z" }, null, -1), $ = [
  W
], j = { key: 5 }, L = /* @__PURE__ */ s("path", { d: "M176,60H80a68,68,0,0,0,0,136h96a68,68,0,0,0,0-136Zm0,128H80A60,60,0,0,1,80,68h96a60,60,0,0,1,0,120ZM80,92a36,36,0,1,0,36,36A36,36,0,0,0,80,92Zm0,64a28,28,0,1,1,28-28A28,28,0,0,1,80,156Z" }, null, -1), T = [
  L
], q = {
  name: "PhToggleLeft"
}, G = /* @__PURE__ */ u({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, l = a("weight", "regular"), _ = a("size", "1em"), m = a("color", "currentColor"), p = a("mirrored", !1), n = r(() => i.weight ?? l), h = r(() => i.size ?? _), g = r(() => i.color ?? m), Z = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", A({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(h),
      height: t(h),
      fill: t(g),
      transform: t(Z)
    }, d.$attrs), [
      y(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", H, k)) : t(n) === "duotone" ? (o(), e("g", v, z)) : t(n) === "fill" ? (o(), e("g", C, N)) : t(n) === "light" ? (o(), e("g", b, P)) : t(n) === "regular" ? (o(), e("g", V, $)) : t(n) === "thin" ? (o(), e("g", j, T)) : M("", !0)
    ], 16, f));
  }
});
export {
  G as default
};
