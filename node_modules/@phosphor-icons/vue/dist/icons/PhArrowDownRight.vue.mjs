import { defineComponent as y, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as L, createCommentVNode as V, createElementVNode as s } from "vue";
const w = ["width", "height", "fill", "transform"], M = { key: 0 }, k = /* @__PURE__ */ s("path", { d: "M204,88V192a12,12,0,0,1-12,12H88a12,12,0,0,1,0-24h75L55.51,72.48a12,12,0,0,1,17-17L180,163V88a12,12,0,0,1,24,0Z" }, null, -1), H = [
  k
], Z = { key: 1 }, A = /* @__PURE__ */ s("path", {
  d: "M192,88V192H88Z",
  opacity: "0.2"
}, null, -1), v = /* @__PURE__ */ s("path", { d: "M195.06,80.61a8,8,0,0,0-8.72,1.73L140,128.69,69.66,58.34A8,8,0,0,0,58.34,69.66L128.69,140,82.34,186.34A8,8,0,0,0,88,200H192a8,8,0,0,0,8-8V88A8,8,0,0,0,195.06,80.61ZM184,184H107.31l38.34-38.34h0L184,107.31Z" }, null, -1), x = [
  A,
  v
], S = { key: 2 }, z = /* @__PURE__ */ s("path", { d: "M200,88V192a8,8,0,0,1-8,8H88a8,8,0,0,1-5.66-13.66L128.69,140,58.34,69.66A8,8,0,0,1,69.66,58.34L140,128.69l46.34-46.35A8,8,0,0,1,200,88Z" }, null, -1), C = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ s("path", { d: "M198,88V192a6,6,0,0,1-6,6H88a6,6,0,0,1,0-12h89.52L59.76,68.24a6,6,0,0,1,8.48-8.48L186,177.52V88a6,6,0,0,1,12,0Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M200,88V192a8,8,0,0,1-8,8H88a8,8,0,0,1,0-16h84.69L58.34,69.66A8,8,0,0,1,69.66,58.34L184,172.69V88a8,8,0,0,1,16,0Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M196,88V192a4,4,0,0,1-4,4H88a4,4,0,0,1,0-8h94.34L61.17,66.83a4,4,0,0,1,5.66-5.66L188,182.34V88a4,4,0,0,1,8,0Z" }, null, -1), D = [
  j
], R = {
  name: "PhArrowDownRight"
}, G = /* @__PURE__ */ y({
  ...R,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, h = r("weight", "regular"), _ = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = d(() => i.weight ?? h), c = d(() => i.size ?? _), u = d(() => i.color ?? p), m = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (a, q) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(u),
      transform: t(m)
    }, a.$attrs), [
      L(a.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", M, H)) : t(n) === "duotone" ? (o(), e("g", Z, x)) : t(n) === "fill" ? (o(), e("g", S, C)) : t(n) === "light" ? (o(), e("g", B, b)) : t(n) === "regular" ? (o(), e("g", E, W)) : t(n) === "thin" ? (o(), e("g", $, D)) : V("", !0)
    ], 16, w));
  }
});
export {
  G as default
};
