import { defineComponent as g, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as v, unref as t, renderSlot as u, createCommentVNode as Z, createElementVNode as s } from "vue";
const y = ["width", "height", "fill", "transform"], M = { key: 0 }, f = /* @__PURE__ */ s("path", { d: "M208,68H28V48A12,12,0,0,0,4,48V208a12,12,0,0,0,24,0V180H228v28a12,12,0,0,0,24,0V112A44.05,44.05,0,0,0,208,68ZM92,156H28V92H92Zm136,0H116V92h92a20,20,0,0,1,20,20Z" }, null, -1), A = [
  f
], w = { key: 1 }, k = /* @__PURE__ */ s("path", {
  d: "M240,112v56H104V80H208A32,32,0,0,1,240,112Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M208,72H24V48A8,8,0,0,0,8,48V208a8,8,0,0,0,16,0V176H232v32a8,8,0,0,0,16,0V112A40,40,0,0,0,208,72ZM24,88H96v72H24Zm88,72V88h96a24,24,0,0,1,24,24v48Z" }, null, -1), S = [
  k,
  x
], z = { key: 2 }, B = /* @__PURE__ */ s("path", { d: "M208,72H24V48A8,8,0,0,0,8,48V208a8,8,0,0,0,16,0V176H232v32a8,8,0,0,0,16,0V112A40,40,0,0,0,208,72ZM24,88H96v72H24Z" }, null, -1), C = [
  B
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M208,74H22V48a6,6,0,0,0-12,0V208a6,6,0,0,0,12,0V174H234v34a6,6,0,0,0,12,0V112A38,38,0,0,0,208,74ZM22,86H98v76H22Zm88,76V86h98a26,26,0,0,1,26,26v50Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M208,72H24V48A8,8,0,0,0,8,48V208a8,8,0,0,0,16,0V176H232v32a8,8,0,0,0,16,0V112A40,40,0,0,0,208,72ZM24,88H96v72H24Zm88,72V88h96a24,24,0,0,1,24,24v48Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M208,76H20V48a4,4,0,0,0-8,0V208a4,4,0,0,0,8,0V172H236v36a4,4,0,0,0,8,0V112A36,36,0,0,0,208,76ZM20,84h80v80H20Zm88,80V84H208a28,28,0,0,1,28,28v52Z" }, null, -1), D = [
  q
], F = {
  name: "PhBed"
}, J = /* @__PURE__ */ g({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(h) {
    const i = h, l = r("weight", "regular"), _ = r("size", "1em"), V = r("color", "currentColor"), p = r("mirrored", !1), n = d(() => i.weight ?? l), c = d(() => i.size ?? _), H = d(() => i.color ?? V), m = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (a, G) => (o(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(H),
      transform: t(m)
    }, a.$attrs), [
      u(a.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", M, A)) : t(n) === "duotone" ? (o(), e("g", w, S)) : t(n) === "fill" ? (o(), e("g", z, C)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, D)) : Z("", !0)
    ], 16, y));
  }
});
export {
  J as default
};
