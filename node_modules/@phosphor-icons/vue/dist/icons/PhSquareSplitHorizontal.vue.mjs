import { defineComponent as m, inject as r, computed as a, openBlock as o, createElementBlock as e, mergeProps as u, unref as t, renderSlot as Z, createCommentVNode as M, createElementVNode as s } from "vue";
const A = ["width", "height", "fill", "transform"], y = { key: 0 }, f = /* @__PURE__ */ s("path", { d: "M200,36H56A20,20,0,0,0,36,56V200a20,20,0,0,0,20,20H200a20,20,0,0,0,20-20V56A20,20,0,0,0,200,36ZM60,60h56V196H60ZM196,196H140V60h56Z" }, null, -1), w = [
  f
], k = { key: 1 }, S = /* @__PURE__ */ s("path", {
  d: "M208,56V200a8,8,0,0,1-8,8H56a8,8,0,0,1-8-8V56a8,8,0,0,1,8-8H200A8,8,0,0,1,208,56Z",
  opacity: "0.2"
}, null, -1), v = /* @__PURE__ */ s("path", { d: "M200,40H56A16,16,0,0,0,40,56V200a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40ZM56,56h64V200H56ZM200,200H136V56h64V200Z" }, null, -1), x = [
  S,
  v
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M120,44V212a4,4,0,0,1-4,4H56a16,16,0,0,1-16-16V56A16,16,0,0,1,56,40h60A4,4,0,0,1,120,44Zm80-4H140a4,4,0,0,0-4,4V212a4,4,0,0,0,4,4h60a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M200,42H56A14,14,0,0,0,42,56V200a14,14,0,0,0,14,14H200a14,14,0,0,0,14-14V56A14,14,0,0,0,200,42ZM54,200V56a2,2,0,0,1,2-2h66V202H56A2,2,0,0,1,54,200Zm148,0a2,2,0,0,1-2,2H134V54h66a2,2,0,0,1,2,2Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M200,40H56A16,16,0,0,0,40,56V200a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40ZM56,56h64V200H56ZM200,200H136V56h64V200Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M200,44H56A12,12,0,0,0,44,56V200a12,12,0,0,0,12,12H200a12,12,0,0,0,12-12V56A12,12,0,0,0,200,44ZM52,200V56a4,4,0,0,1,4-4h68V204H56A4,4,0,0,1,52,200Zm152,0a4,4,0,0,1-4,4H132V52h68a4,4,0,0,1,4,4Z" }, null, -1), D = [
  q
], F = {
  name: "PhSquareSplitHorizontal"
}, J = /* @__PURE__ */ m({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, l = r("weight", "regular"), _ = r("size", "1em"), V = r("color", "currentColor"), p = r("mirrored", !1), n = a(() => i.weight ?? l), h = a(() => i.size ?? _), H = a(() => i.color ?? V), g = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (d, G) => (o(), e("svg", u({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(h),
      height: t(h),
      fill: t(H),
      transform: t(g)
    }, d.$attrs), [
      Z(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", y, w)) : t(n) === "duotone" ? (o(), e("g", k, x)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, D)) : M("", !0)
    ], 16, A));
  }
});
export {
  J as default
};
