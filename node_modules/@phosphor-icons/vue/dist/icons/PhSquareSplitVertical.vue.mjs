import { defineComponent as g, inject as r, computed as a, openBlock as o, createElementBlock as e, mergeProps as u, unref as t, renderSlot as v, createCommentVNode as A, createElementVNode as s } from "vue";
const Z = ["width", "height", "fill", "transform"], y = { key: 0 }, M = /* @__PURE__ */ s("path", { d: "M200,36H56A20,20,0,0,0,36,56V200a20,20,0,0,0,20,20H200a20,20,0,0,0,20-20V56A20,20,0,0,0,200,36Zm-4,24v56H60V60ZM60,196V140H196v56Z" }, null, -1), f = [
  M
], w = { key: 1 }, k = /* @__PURE__ */ s("path", {
  d: "M208,56V200a8,8,0,0,1-8,8H56a8,8,0,0,1-8-8V56a8,8,0,0,1,8-8H200A8,8,0,0,1,208,56Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ s("path", { d: "M200,40H56A16,16,0,0,0,40,56V200a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Zm0,16v64H56V56Zm0,144H56V136H200v64Z" }, null, -1), x = [
  k,
  S
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M216,56v60a4,4,0,0,1-4,4H44a4,4,0,0,1-4-4V56A16,16,0,0,1,56,40H200A16,16,0,0,1,216,56Zm-4,80H44a4,4,0,0,0-4,4v60a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V140A4,4,0,0,0,212,136Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M200,42H56A14,14,0,0,0,42,56V200a14,14,0,0,0,14,14H200a14,14,0,0,0,14-14V56A14,14,0,0,0,200,42ZM56,54H200a2,2,0,0,1,2,2v66H54V56A2,2,0,0,1,56,54ZM200,202H56a2,2,0,0,1-2-2V134H202v66A2,2,0,0,1,200,202Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M200,40H56A16,16,0,0,0,40,56V200a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Zm0,16v64H56V56Zm0,144H56V136H200v64Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M200,44H56A12,12,0,0,0,44,56V200a12,12,0,0,0,12,12H200a12,12,0,0,0,12-12V56A12,12,0,0,0,200,44ZM56,52H200a4,4,0,0,1,4,4v68H52V56A4,4,0,0,1,56,52ZM200,204H56a4,4,0,0,1-4-4V132H204v68A4,4,0,0,1,200,204Z" }, null, -1), D = [
  q
], F = {
  name: "PhSquareSplitVertical"
}, J = /* @__PURE__ */ g({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), H = r("color", "currentColor"), p = r("mirrored", !1), n = a(() => i.weight ?? _), c = a(() => i.size ?? h), V = a(() => i.color ?? H), m = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (d, G) => (o(), e("svg", u({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(V),
      transform: t(m)
    }, d.$attrs), [
      v(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", y, f)) : t(n) === "duotone" ? (o(), e("g", w, x)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, D)) : A("", !0)
    ], 16, Z));
  }
});
export {
  J as default
};
