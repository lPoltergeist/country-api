import { defineComponent as y, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as A, unref as t, renderSlot as f, createCommentVNode as w, createElementVNode as s } from "vue";
const M = ["width", "height", "fill", "transform"], k = { key: 0 }, Z = /* @__PURE__ */ s("path", { d: "M228,128a100,100,0,1,1-22.86-63.64,12,12,0,0,1-18.51,15.28A76,76,0,1,0,203.05,140H128a12,12,0,0,1,0-24h88A12,12,0,0,1,228,128Z" }, null, -1), v = [
  Z
], x = { key: 1 }, H = /* @__PURE__ */ s("path", {
  d: "M216,128a88,88,0,1,1-88-88A88,88,0,0,1,216,128Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ s("path", { d: "M224,128a96,96,0,1,1-21.95-61.09,8,8,0,1,1-12.33,10.18A80,80,0,1,0,207.6,136H128a8,8,0,0,1,0-16h88A8,8,0,0,1,224,128Z" }, null, -1), z = [
  H,
  S
], C = { key: 2 }, B = /* @__PURE__ */ s("path", { d: "M128,24A104,104,0,1,0,232,128,104,104,0,0,0,128,24Zm0,184A80,80,0,1,1,181.34,68.37a8,8,0,0,1-10.67,11.92A64,64,0,1,0,191.5,136H128a8,8,0,0,1,0-16h72a8,8,0,0,1,8,8A80.09,80.09,0,0,1,128,208Z" }, null, -1), N = [
  B
], b = { key: 3 }, E = /* @__PURE__ */ s("path", { d: "M222,128a94,94,0,1,1-21.49-59.82,6,6,0,1,1-9.25,7.64A82,82,0,1,0,209.78,134H128a6,6,0,0,1,0-12h88A6,6,0,0,1,222,128Z" }, null, -1), P = [
  E
], V = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M224,128a96,96,0,1,1-21.95-61.09,8,8,0,1,1-12.33,10.18A80,80,0,1,0,207.6,136H128a8,8,0,0,1,0-16h88A8,8,0,0,1,224,128Z" }, null, -1), $ = [
  W
], j = { key: 5 }, G = /* @__PURE__ */ s("path", { d: "M220,128a92,92,0,1,1-21-58.55,4,4,0,0,1-6.17,5.1A84,84,0,1,0,211.91,132H128a4,4,0,0,1,0-8h88A4,4,0,0,1,220,128Z" }, null, -1), L = [
  G
], q = {
  name: "PhGoogleLogo"
}, I = /* @__PURE__ */ y({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), a = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = d(() => i.weight ?? _), c = d(() => i.size ?? a), m = d(() => i.color ?? p), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (h, D) => (o(), e("svg", A({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(m),
      transform: t(u)
    }, h.$attrs), [
      f(h.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", k, v)) : t(n) === "duotone" ? (o(), e("g", x, z)) : t(n) === "fill" ? (o(), e("g", C, N)) : t(n) === "light" ? (o(), e("g", b, P)) : t(n) === "regular" ? (o(), e("g", V, $)) : t(n) === "thin" ? (o(), e("g", j, L)) : w("", !0)
    ], 16, M));
  }
});
export {
  I as default
};
