import { defineComponent as u, inject as a, computed as r, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as M, createCommentVNode as f, createElementVNode as s } from "vue";
const Z = ["width", "height", "fill", "transform"], w = { key: 0 }, k = /* @__PURE__ */ s("path", { d: "M244,116H186.79a60,60,0,0,0-117.58,0H12a12,12,0,0,0,0,24H69.21a60,60,0,0,0,117.58,0H244a12,12,0,0,0,0-24ZM128,164a36,36,0,1,1,36-36A36,36,0,0,1,128,164Z" }, null, -1), A = [
  k
], v = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M176,128a48,48,0,1,1-48-48A48,48,0,0,1,176,128Z",
  opacity: "0.2"
}, null, -1), C = /* @__PURE__ */ s("path", { d: "M248,120H183.42a56,56,0,0,0-110.84,0H8a8,8,0,0,0,0,16H72.58a56,56,0,0,0,110.84,0H248a8,8,0,0,0,0-16ZM128,168a40,40,0,1,1,40-40A40,40,0,0,1,128,168Z" }, null, -1), S = [
  x,
  C
], z = { key: 2 }, B = /* @__PURE__ */ s("path", { d: "M256,128a8,8,0,0,1-8,8H183.42a56,56,0,0,1-110.84,0H8a8,8,0,0,1,0-16H72.58a56,56,0,0,1,110.84,0H248A8,8,0,0,1,256,128Z" }, null, -1), N = [
  B
], b = { key: 3 }, E = /* @__PURE__ */ s("path", { d: "M248,122H181.66a54,54,0,0,0-107.32,0H8a6,6,0,0,0,0,12H74.34a54,54,0,0,0,107.32,0H248a6,6,0,0,0,0-12ZM128,170a42,42,0,1,1,42-42A42,42,0,0,1,128,170Z" }, null, -1), P = [
  E
], V = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M248,120H183.42a56,56,0,0,0-110.84,0H8a8,8,0,0,0,0,16H72.58a56,56,0,0,0,110.84,0H248a8,8,0,0,0,0-16ZM128,168a40,40,0,1,1,40-40A40,40,0,0,1,128,168Z" }, null, -1), $ = [
  W
], j = { key: 5 }, G = /* @__PURE__ */ s("path", { d: "M248,124H179.83a52,52,0,0,0-103.66,0H8a4,4,0,0,0,0,8H76.17a52,52,0,0,0,103.66,0H248a4,4,0,0,0,0-8ZM128,172a44,44,0,1,1,44-44A44.05,44.05,0,0,1,128,172Z" }, null, -1), q = [
  G
], D = {
  name: "PhGitCommit"
}, J = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = a("weight", "regular"), h = a("size", "1em"), p = a("color", "currentColor"), H = a("mirrored", !1), n = r(() => i.weight ?? _), d = r(() => i.size ?? h), g = r(() => i.color ?? p), m = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : H ? "scale(-1, 1)" : void 0);
    return (c, F) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(g),
      transform: t(m)
    }, c.$attrs), [
      M(c.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", w, A)) : t(n) === "duotone" ? (o(), e("g", v, S)) : t(n) === "fill" ? (o(), e("g", z, N)) : t(n) === "light" ? (o(), e("g", b, P)) : t(n) === "regular" ? (o(), e("g", V, $)) : t(n) === "thin" ? (o(), e("g", j, q)) : f("", !0)
    ], 16, Z));
  }
});
export {
  J as default
};
