import { defineComponent as y, inject as l, computed as r, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as V, createCommentVNode as w, createElementVNode as s } from "vue";
const M = ["width", "height", "fill", "transform"], k = { key: 0 }, v = /* @__PURE__ */ s("path", { d: "M208.49,120.49a12,12,0,0,1-17,0L140,69V216a12,12,0,0,1-24,0V69L64.49,120.49a12,12,0,0,1-17-17l72-72a12,12,0,0,1,17,0l72,72A12,12,0,0,1,208.49,120.49Z" }, null, -1), A = [
  v
], L = { key: 1 }, Z = /* @__PURE__ */ s("path", {
  d: "M200,112H56l72-72Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M205.66,106.34l-72-72a8,8,0,0,0-11.32,0l-72,72A8,8,0,0,0,56,120h64v96a8,8,0,0,0,16,0V120h64a8,8,0,0,0,5.66-13.66ZM75.31,104,128,51.31,180.69,104Z" }, null, -1), S = [
  Z,
  x
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M207.39,115.06A8,8,0,0,1,200,120H136v96a8,8,0,0,1-16,0V120H56a8,8,0,0,1-5.66-13.66l72-72a8,8,0,0,1,11.32,0l72,72A8,8,0,0,1,207.39,115.06Z" }, null, -1), B = [
  C
], H = { key: 3 }, N = /* @__PURE__ */ s("path", { d: "M204.24,116.24a6,6,0,0,1-8.48,0L134,54.49V216a6,6,0,0,1-12,0V54.49L60.24,116.24a6,6,0,0,1-8.48-8.48l72-72a6,6,0,0,1,8.48,0l72,72A6,6,0,0,1,204.24,116.24Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M205.66,117.66a8,8,0,0,1-11.32,0L136,59.31V216a8,8,0,0,1-16,0V59.31L61.66,117.66a8,8,0,0,1-11.32-11.32l72-72a8,8,0,0,1,11.32,0l72,72A8,8,0,0,1,205.66,117.66Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M202.83,114.83a4,4,0,0,1-5.66,0L132,49.66V216a4,4,0,0,1-8,0V49.66L58.83,114.83a4,4,0,0,1-5.66-5.66l72-72a4,4,0,0,1,5.66,0l72,72A4,4,0,0,1,202.83,114.83Z" }, null, -1), U = [
  j
], q = {
  name: "PhArrowUp"
}, G = /* @__PURE__ */ y({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, _ = l("weight", "regular"), h = l("size", "1em"), p = l("color", "currentColor"), g = l("mirrored", !1), n = r(() => i.weight ?? _), a = r(() => i.size ?? h), u = r(() => i.color ?? p), m = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(u),
      transform: t(m)
    }, d.$attrs), [
      V(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", k, A)) : t(n) === "duotone" ? (o(), e("g", L, S)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", H, b)) : t(n) === "regular" ? (o(), e("g", E, W)) : t(n) === "thin" ? (o(), e("g", $, U)) : w("", !0)
    ], 16, M));
  }
});
export {
  G as default
};
