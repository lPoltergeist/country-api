import { defineComponent as f, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as A, createCommentVNode as w, createElementVNode as n } from "vue";
const M = ["width", "height", "fill", "transform"], k = { key: 0 }, Z = /* @__PURE__ */ n("path", { d: "M144,204a16,16,0,1,1-16-16A16,16,0,0,1,144,204Z" }, null, -1), v = [
  Z
], x = { key: 1 }, S = /* @__PURE__ */ n("path", { d: "M247.89,80.91a15.93,15.93,0,0,0-6.17-10.81A186.67,186.67,0,0,0,128,32,186.67,186.67,0,0,0,14.28,70.1,15.93,15.93,0,0,0,8.11,80.91,15.65,15.65,0,0,0,11.65,92.8l104,125.43A15.93,15.93,0,0,0,128,224h0a15.93,15.93,0,0,0,12.31-5.77h0l104-125.43A15.65,15.65,0,0,0,247.89,80.91ZM128,208,24.09,82.74A170.76,170.76,0,0,1,128,48,170.76,170.76,0,0,1,231.91,82.74Z" }, null, -1), z = [
  S
], C = { key: 2 }, B = /* @__PURE__ */ n("path", { d: "M247.89,80.91a15.93,15.93,0,0,0-6.17-10.81A186.67,186.67,0,0,0,128,32,186.67,186.67,0,0,0,14.28,70.1,15.93,15.93,0,0,0,8.11,80.91,15.65,15.65,0,0,0,11.65,92.8l104,125.43A15.93,15.93,0,0,0,128,224h0a15.93,15.93,0,0,0,12.31-5.77h0l104-125.43A15.65,15.65,0,0,0,247.89,80.91ZM128,208,24.09,82.74A170.76,170.76,0,0,1,128,48,170.76,170.76,0,0,1,231.91,82.74Z" }, null, -1), N = [
  B
], W = { key: 3 }, b = /* @__PURE__ */ n("path", { d: "M138,204a10,10,0,1,1-10-10A10,10,0,0,1,138,204Z" }, null, -1), E = [
  b
], P = { key: 4 }, V = /* @__PURE__ */ n("path", { d: "M140,204a12,12,0,1,1-12-12A12,12,0,0,1,140,204Z" }, null, -1), $ = [
  V
], j = { key: 5 }, q = /* @__PURE__ */ n("path", { d: "M136,204a8,8,0,1,1-8-8A8,8,0,0,1,136,204Z" }, null, -1), D = [
  q
], F = {
  name: "PhWifiNone"
}, I = /* @__PURE__ */ f({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(h) {
    const i = h, _ = r("weight", "regular"), a = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = d(() => i.weight ?? _), l = d(() => i.size ?? a), m = d(() => i.color ?? p), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (c, G) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(m),
      transform: t(u)
    }, c.$attrs), [
      A(c.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", k, v)) : t(s) === "duotone" ? (o(), e("g", x, z)) : t(s) === "fill" ? (o(), e("g", C, N)) : t(s) === "light" ? (o(), e("g", W, E)) : t(s) === "regular" ? (o(), e("g", P, $)) : t(s) === "thin" ? (o(), e("g", j, D)) : w("", !0)
    ], 16, M));
  }
});
export {
  I as default
};
