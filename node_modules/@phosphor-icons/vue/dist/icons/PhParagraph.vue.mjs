import { defineComponent as m, inject as i, computed as a, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as H, createCommentVNode as M, createElementVNode as s } from "vue";
const f = ["width", "height", "fill", "transform"], Z = { key: 0 }, v = /* @__PURE__ */ s("path", { d: "M208,36H96a68,68,0,0,0,0,136h36v36a12,12,0,0,0,24,0V60h16V208a12,12,0,0,0,24,0V60h12a12,12,0,0,0,0-24ZM132,148H96a44,44,0,0,1,0-88h36Z" }, null, -1), w = [
  v
], k = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M144,48V160H96A56,56,0,0,1,96,48Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ s("path", { d: "M208,40H96a64,64,0,0,0,0,128h40v40a8,8,0,0,0,16,0V56h24V208a8,8,0,0,0,16,0V56h16a8,8,0,0,0,0-16ZM136,152H96a48,48,0,0,1,0-96h40Z" }, null, -1), z = [
  x,
  S
], A = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M216,48a8,8,0,0,1-8,8H192V208a8,8,0,0,1-16,0V56H152V208a8,8,0,0,1-16,0V168H96A64,64,0,0,1,96,40H208A8,8,0,0,1,216,48Z" }, null, -1), B = [
  C
], N = { key: 3 }, P = /* @__PURE__ */ s("path", { d: "M208,42H96a62,62,0,0,0,0,124h42v42a6,6,0,0,0,12,0V54h28V208a6,6,0,0,0,12,0V54h18a6,6,0,0,0,0-12ZM138,154H96A50,50,0,0,1,96,54h42Z" }, null, -1), b = [
  P
], E = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M208,40H96a64,64,0,0,0,0,128h40v40a8,8,0,0,0,16,0V56h24V208a8,8,0,0,0,16,0V56h16a8,8,0,0,0,0-16ZM136,152H96a48,48,0,0,1,0-96h40Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M208,44H96a60,60,0,0,0,0,120h44v44a4,4,0,0,0,8,0V52h32V208a4,4,0,0,0,8,0V52h20a4,4,0,0,0,0-8ZM140,156H96A52,52,0,0,1,96,52h44Z" }, null, -1), D = [
  q
], F = {
  name: "PhParagraph"
}, J = /* @__PURE__ */ m({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const h = c, l = i("weight", "regular"), _ = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), n = a(() => h.weight ?? l), r = a(() => h.size ?? _), V = a(() => h.color ?? p), u = a(() => h.mirrored !== void 0 ? h.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, G) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(r),
      height: t(r),
      fill: t(V),
      transform: t(u)
    }, d.$attrs), [
      H(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", Z, w)) : t(n) === "duotone" ? (o(), e("g", k, z)) : t(n) === "fill" ? (o(), e("g", A, B)) : t(n) === "light" ? (o(), e("g", N, b)) : t(n) === "regular" ? (o(), e("g", E, $)) : t(n) === "thin" ? (o(), e("g", j, D)) : M("", !0)
    ], 16, f));
  }
});
export {
  J as default
};
