import { defineComponent as M, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as H, createCommentVNode as Z, createElementVNode as s } from "vue";
const f = ["width", "height", "fill", "transform"], w = { key: 0 }, V = /* @__PURE__ */ s("path", { d: "M47.51,112.49a12,12,0,0,1,17-17L116,147V32a12,12,0,0,1,24,0V147l51.51-51.52a12,12,0,0,1,17,17l-72,72a12,12,0,0,1-17,0ZM216,204H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Z" }, null, -1), k = [
  V
], v = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M200,112l-72,72L56,112Z",
  opacity: "0.2"
}, null, -1), L = /* @__PURE__ */ s("path", { d: "M122.34,189.66a8,8,0,0,0,11.32,0l72-72A8,8,0,0,0,200,104H136V32a8,8,0,0,0-16,0v72H56a8,8,0,0,0-5.66,13.66ZM180.69,120,128,172.69,75.31,120ZM224,216a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,216Z" }, null, -1), S = [
  x,
  L
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M50.34,117.66A8,8,0,0,1,56,104h64V32a8,8,0,0,1,16,0v72h64a8,8,0,0,1,5.66,13.66l-72,72a8,8,0,0,1-11.32,0ZM216,208H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), A = [
  C
], B = { key: 3 }, N = /* @__PURE__ */ s("path", { d: "M51.76,116.24a6,6,0,0,1,8.48-8.48L122,169.51V32a6,6,0,0,1,12,0V169.51l61.76-61.75a6,6,0,0,1,8.48,8.48l-72,72a6,6,0,0,1-8.48,0ZM216,210H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M50.34,117.66a8,8,0,0,1,11.32-11.32L120,164.69V32a8,8,0,0,1,16,0V164.69l58.34-58.35a8,8,0,0,1,11.32,11.32l-72,72a8,8,0,0,1-11.32,0ZM216,208H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M53.17,114.83a4,4,0,0,1,5.66-5.66L124,174.34V32a4,4,0,0,1,8,0V174.34l65.17-65.17a4,4,0,1,1,5.66,5.66l-72,72a4,4,0,0,1-5.66,0ZM216,212H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Z" }, null, -1), D = [
  j
], q = {
  name: "PhArrowLineDown"
}, I = /* @__PURE__ */ M({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const a = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), n = r(() => a.weight ?? _), l = r(() => a.size ?? h), u = r(() => a.color ?? p), m = r(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(u),
      transform: t(m)
    }, d.$attrs), [
      H(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", w, k)) : t(n) === "duotone" ? (o(), e("g", v, S)) : t(n) === "fill" ? (o(), e("g", z, A)) : t(n) === "light" ? (o(), e("g", B, b)) : t(n) === "regular" ? (o(), e("g", E, W)) : t(n) === "thin" ? (o(), e("g", $, D)) : Z("", !0)
    ], 16, f));
  }
});
export {
  I as default
};
