import { defineComponent as v, inject as a, computed as r, openBlock as o, createElementBlock as e, mergeProps as V, unref as t, renderSlot as H, createCommentVNode as y, createElementVNode as s } from "vue";
const f = ["width", "height", "fill", "transform"], w = { key: 0 }, M = /* @__PURE__ */ s("path", { d: "M228,128a12,12,0,0,1-12,12H140v76a12,12,0,0,1-24,0V140H40a12,12,0,0,1,0-24h76V40a12,12,0,0,1,24,0v76h76A12,12,0,0,1,228,128Z" }, null, -1), k = [
  M
], A = { key: 1 }, Z = /* @__PURE__ */ s("path", {
  d: "M216,48V208a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208A8,8,0,0,1,216,48Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z" }, null, -1), S = [
  Z,
  x
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM184,136H136v48a8,8,0,0,1-16,0V136H72a8,8,0,0,1,0-16h48V72a8,8,0,0,1,16,0v48h48a8,8,0,0,1,0,16Z" }, null, -1), B = [
  C
], N = { key: 3 }, P = /* @__PURE__ */ s("path", { d: "M222,128a6,6,0,0,1-6,6H134v82a6,6,0,0,1-12,0V134H40a6,6,0,0,1,0-12h82V40a6,6,0,0,1,12,0v82h82A6,6,0,0,1,222,128Z" }, null, -1), b = [
  P
], E = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M220,128a4,4,0,0,1-4,4H132v84a4,4,0,0,1-8,0V132H40a4,4,0,0,1,0-8h84V40a4,4,0,0,1,8,0v84h84A4,4,0,0,1,220,128Z" }, null, -1), D = [
  q
], F = {
  name: "PhPlus"
}, J = /* @__PURE__ */ v({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, l = a("weight", "regular"), _ = a("size", "1em"), p = a("color", "currentColor"), g = a("mirrored", !1), n = r(() => i.weight ?? l), h = r(() => i.size ?? _), u = r(() => i.color ?? p), m = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, G) => (o(), e("svg", V({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(h),
      height: t(h),
      fill: t(u),
      transform: t(m)
    }, d.$attrs), [
      H(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", w, k)) : t(n) === "duotone" ? (o(), e("g", A, S)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", N, b)) : t(n) === "regular" ? (o(), e("g", E, $)) : t(n) === "thin" ? (o(), e("g", j, D)) : y("", !0)
    ], 16, f));
  }
});
export {
  J as default
};
