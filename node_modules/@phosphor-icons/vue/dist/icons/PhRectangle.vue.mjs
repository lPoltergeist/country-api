import { defineComponent as u, inject as r, computed as c, openBlock as o, createElementBlock as e, mergeProps as V, unref as t, renderSlot as y, createCommentVNode as f, createElementVNode as s } from "vue";
const w = ["width", "height", "fill", "transform"], A = { key: 0 }, Z = /* @__PURE__ */ s("path", { d: "M216,36H40A20,20,0,0,0,20,56V200a20,20,0,0,0,20,20H216a20,20,0,0,0,20-20V56A20,20,0,0,0,216,36Zm-4,160H44V60H212Z" }, null, -1), k = [
  Z
], x = { key: 1 }, M = /* @__PURE__ */ s("path", {
  d: "M224,56V200a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56a8,8,0,0,1,8-8H216A8,8,0,0,1,224,56Z",
  opacity: "0.2"
}, null, -1), v = /* @__PURE__ */ s("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,160H40V56H216V200Z" }, null, -1), S = [
  M,
  v
], z = { key: 2 }, C = /* @__PURE__ */ s("rect", {
  x: "24",
  y: "40",
  width: "208",
  height: "176",
  rx: "16"
}, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M216,42H40A14,14,0,0,0,26,56V200a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A14,14,0,0,0,216,42Zm2,158a2,2,0,0,1-2,2H40a2,2,0,0,1-2-2V56a2,2,0,0,1,2-2H216a2,2,0,0,1,2,2Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,160H40V56H216V200Z" }, null, -1), $ = [
  W
], j = { key: 5 }, R = /* @__PURE__ */ s("path", { d: "M216,44H40A12,12,0,0,0,28,56V200a12,12,0,0,0,12,12H216a12,12,0,0,0,12-12V56A12,12,0,0,0,216,44Zm4,156a4,4,0,0,1-4,4H40a4,4,0,0,1-4-4V56a4,4,0,0,1,4-4H216a4,4,0,0,1,4,4Z" }, null, -1), q = [
  R
], D = {
  name: "PhRectangle"
}, I = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = c(() => i.weight ?? _), a = c(() => i.size ?? h), m = c(() => i.color ?? p), H = c(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", V({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(H)
    }, d.$attrs), [
      y(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", A, k)) : t(n) === "duotone" ? (o(), e("g", x, S)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, q)) : f("", !0)
    ], 16, w));
  }
});
export {
  I as default
};
