import { defineComponent as Z, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as g, unref as t, renderSlot as u, createCommentVNode as v, createElementVNode as s } from "vue";
const A = ["width", "height", "fill", "transform"], M = { key: 0 }, y = /* @__PURE__ */ s("path", { d: "M216,36H40A20,20,0,0,0,20,56V200a20,20,0,0,0,20,20H216a20,20,0,0,0,20-20V56A20,20,0,0,0,216,36Zm-4,24V92H44V60ZM44,116H92v80H44Zm72,80V116h96v80Z" }, null, -1), f = [
  y
], w = { key: 1 }, k = /* @__PURE__ */ s("path", {
  d: "M104,104V208H40a8,8,0,0,1-8-8V104Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V96H40V56ZM40,112H96v88H40Zm176,88H112V112H216v88Z" }, null, -1), S = [
  k,
  x
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40ZM40,56H216V96H40ZM216,200H112V112H216v88Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M216,42H40A14,14,0,0,0,26,56V200a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A14,14,0,0,0,216,42ZM40,54H216a2,2,0,0,1,2,2V98H38V56A2,2,0,0,1,40,54ZM38,200V110H98v92H40A2,2,0,0,1,38,200Zm178,2H110V110H218v90A2,2,0,0,1,216,202Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V96H40V56ZM40,112H96v88H40Zm176,88H112V112H216v88Z" }, null, -1), $ = [
  W
], j = { key: 5 }, L = /* @__PURE__ */ s("path", { d: "M216,44H40A12,12,0,0,0,28,56V200a12,12,0,0,0,12,12H216a12,12,0,0,0,12-12V56A12,12,0,0,0,216,44ZM40,52H216a4,4,0,0,1,4,4v44H36V56A4,4,0,0,1,40,52ZM36,200V108h64v96H40A4,4,0,0,1,36,200Zm180,4H108V108H220v92A4,4,0,0,1,216,204Z" }, null, -1), q = [
  L
], D = {
  name: "PhLayout"
}, I = /* @__PURE__ */ Z({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(a) {
    const i = a, _ = r("weight", "regular"), h = r("size", "1em"), H = r("color", "currentColor"), V = r("mirrored", !1), n = d(() => i.weight ?? _), c = d(() => i.size ?? h), m = d(() => i.color ?? H), p = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : V ? "scale(-1, 1)" : void 0);
    return (l, F) => (o(), e("svg", g({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(m),
      transform: t(p)
    }, l.$attrs), [
      u(l.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", M, f)) : t(n) === "duotone" ? (o(), e("g", w, S)) : t(n) === "fill" ? (o(), e("g", z, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, q)) : v("", !0)
    ], 16, A));
  }
});
export {
  I as default
};
