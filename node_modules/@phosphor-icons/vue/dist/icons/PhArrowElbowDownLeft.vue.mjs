import { defineComponent as V, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as f, createCommentVNode as w, createElementVNode as s } from "vue";
const H = ["width", "height", "fill", "transform"], M = { key: 0 }, v = /* @__PURE__ */ s("path", { d: "M204,32V176a12,12,0,0,1-12,12H77l27.52,27.51a12,12,0,0,1-17,17l-48-48a12,12,0,0,1,0-17l48-48a12,12,0,1,1,17,17L77,164H180V32a12,12,0,0,1,24,0Z" }, null, -1), k = [
  v
], Z = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M96,128v96L48,176Z",
  opacity: "0.2"
}, null, -1), L = /* @__PURE__ */ s("path", { d: "M192,24a8,8,0,0,0-8,8V168H104V128a8,8,0,0,0-13.66-5.66l-48,48a8,8,0,0,0,0,11.32l48,48A8,8,0,0,0,104,224V184h88a8,8,0,0,0,8-8V32A8,8,0,0,0,192,24ZM88,204.69,59.31,176,88,147.31Z" }, null, -1), S = [
  x,
  L
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M200,32V176a8,8,0,0,1-8,8H104v40a8,8,0,0,1-13.66,5.66l-48-48a8,8,0,0,1,0-11.32l48-48A8,8,0,0,1,104,128v40h80V32a8,8,0,0,1,16,0Z" }, null, -1), A = [
  C
], B = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M198,32V176a6,6,0,0,1-6,6H62.49l37.75,37.76a6,6,0,1,1-8.48,8.48l-48-48a6,6,0,0,1,0-8.48l48-48a6,6,0,1,1,8.48,8.48L62.49,170H186V32a6,6,0,0,1,12,0Z" }, null, -1), E = [
  b
], N = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M200,32V176a8,8,0,0,1-8,8H67.31l34.35,34.34a8,8,0,0,1-11.32,11.32l-48-48a8,8,0,0,1,0-11.32l48-48a8,8,0,0,1,11.32,11.32L67.31,168H184V32a8,8,0,0,1,16,0Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M196,32V176a4,4,0,0,1-4,4H57.66l41.17,41.17a4,4,0,0,1-5.66,5.66l-48-48a4,4,0,0,1,0-5.66l48-48a4,4,0,1,1,5.66,5.66L57.66,172H188V32a4,4,0,0,1,8,0Z" }, null, -1), D = [
  j
], q = {
  name: "PhArrowElbowDownLeft"
}, I = /* @__PURE__ */ V({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const l = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), n = r(() => l.weight ?? _), a = r(() => l.size ?? h), u = r(() => l.color ?? p), m = r(() => l.mirrored !== void 0 ? l.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(u),
      transform: t(m)
    }, d.$attrs), [
      f(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", M, k)) : t(n) === "duotone" ? (o(), e("g", Z, S)) : t(n) === "fill" ? (o(), e("g", z, A)) : t(n) === "light" ? (o(), e("g", B, E)) : t(n) === "regular" ? (o(), e("g", N, W)) : t(n) === "thin" ? (o(), e("g", $, D)) : w("", !0)
    ], 16, H));
  }
});
export {
  I as default
};
