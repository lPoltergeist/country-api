import { defineComponent as y, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as w, createCommentVNode as H, createElementVNode as s } from "vue";
const M = ["width", "height", "fill", "transform"], k = { key: 0 }, v = /* @__PURE__ */ s("path", { d: "M228,128a12,12,0,0,1-12,12H69l51.52,51.51a12,12,0,0,1-17,17l-72-72a12,12,0,0,1,0-17l72-72a12,12,0,0,1,17,17L69,116H216A12,12,0,0,1,228,128Z" }, null, -1), A = [
  v
], Z = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M112,56V200L40,128Z",
  opacity: "0.2"
}, null, -1), L = /* @__PURE__ */ s("path", { d: "M216,120H120V56a8,8,0,0,0-13.66-5.66l-72,72a8,8,0,0,0,0,11.32l72,72A8,8,0,0,0,120,200V136h96a8,8,0,0,0,0-16ZM104,180.69,51.31,128,104,75.31Z" }, null, -1), S = [
  x,
  L
], z = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M224,128a8,8,0,0,1-8,8H120v64a8,8,0,0,1-13.66,5.66l-72-72a8,8,0,0,1,0-11.32l72-72A8,8,0,0,1,120,56v64h96A8,8,0,0,1,224,128Z" }, null, -1), V = [
  C
], B = { key: 3 }, N = /* @__PURE__ */ s("path", { d: "M222,128a6,6,0,0,1-6,6H54.49l61.75,61.76a6,6,0,1,1-8.48,8.48l-72-72a6,6,0,0,1,0-8.48l72-72a6,6,0,0,1,8.48,8.48L54.49,122H216A6,6,0,0,1,222,128Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M224,128a8,8,0,0,1-8,8H59.31l58.35,58.34a8,8,0,0,1-11.32,11.32l-72-72a8,8,0,0,1,0-11.32l72-72a8,8,0,0,1,11.32,11.32L59.31,120H216A8,8,0,0,1,224,128Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M220,128a4,4,0,0,1-4,4H49.66l65.17,65.17a4,4,0,0,1-5.66,5.66l-72-72a4,4,0,0,1,0-5.66l72-72a4,4,0,0,1,5.66,5.66L49.66,124H216A4,4,0,0,1,220,128Z" }, null, -1), q = [
  j
], D = {
  name: "PhArrowLeft"
}, I = /* @__PURE__ */ y({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const l = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), n = r(() => l.weight ?? _), a = r(() => l.size ?? h), u = r(() => l.color ?? p), m = r(() => l.mirrored !== void 0 ? l.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(u),
      transform: t(m)
    }, d.$attrs), [
      w(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", k, A)) : t(n) === "duotone" ? (o(), e("g", Z, S)) : t(n) === "fill" ? (o(), e("g", z, V)) : t(n) === "light" ? (o(), e("g", B, b)) : t(n) === "regular" ? (o(), e("g", E, W)) : t(n) === "thin" ? (o(), e("g", $, q)) : H("", !0)
    ], 16, M));
  }
});
export {
  I as default
};
