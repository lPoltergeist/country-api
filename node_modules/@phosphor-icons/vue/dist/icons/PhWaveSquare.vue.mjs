import { defineComponent as u, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as v, unref as t, renderSlot as H, createCommentVNode as y, createElementVNode as s } from "vue";
const f = ["width", "height", "fill", "transform"], w = { key: 0 }, M = /* @__PURE__ */ s("path", { d: "M244,128v56a12,12,0,0,1-12,12H128a12,12,0,0,1-12-12V84H36v44a12,12,0,0,1-24,0V72A12,12,0,0,1,24,60H128a12,12,0,0,1,12,12V172h80V128a12,12,0,0,1,24,0Z" }, null, -1), Z = [
  M
], k = { key: 1 }, S = /* @__PURE__ */ s("path", {
  d: "M128,72v56H24V72Zm0,56v56H232V128Z",
  opacity: "0.2"
}, null, -1), x = /* @__PURE__ */ s("path", { d: "M240,128v56a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V80H32v48a8,8,0,0,1-16,0V72a8,8,0,0,1,8-8H128a8,8,0,0,1,8,8V176h88V128a8,8,0,0,1,16,0Z" }, null, -1), z = [
  S,
  x
], C = { key: 2 }, B = /* @__PURE__ */ s("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm-8,128a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V96H64v32a8,8,0,0,1-16,0V88a8,8,0,0,1,8-8h72a8,8,0,0,1,8,8v72h56V128a8,8,0,0,1,16,0Z" }, null, -1), A = [
  B
], N = { key: 3 }, W = /* @__PURE__ */ s("path", { d: "M238,128v56a6,6,0,0,1-6,6H128a6,6,0,0,1-6-6V78H30v50a6,6,0,0,1-12,0V72a6,6,0,0,1,6-6H128a6,6,0,0,1,6,6V178h92V128a6,6,0,0,1,12,0Z" }, null, -1), b = [
  W
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M240,128v56a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V80H32v48a8,8,0,0,1-16,0V72a8,8,0,0,1,8-8H128a8,8,0,0,1,8,8V176h88V128a8,8,0,0,1,16,0Z" }, null, -1), $ = [
  P
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M236,128v56a4,4,0,0,1-4,4H128a4,4,0,0,1-4-4V76H28v52a4,4,0,0,1-8,0V72a4,4,0,0,1,4-4H128a4,4,0,0,1,4,4V180h96V128a4,4,0,0,1,8,0Z" }, null, -1), D = [
  q
], F = {
  name: "PhWaveSquare"
}, J = /* @__PURE__ */ u({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(h) {
    const n = h, l = i("weight", "regular"), _ = i("size", "1em"), V = i("color", "currentColor"), p = i("mirrored", !1), a = r(() => n.weight ?? l), d = r(() => n.size ?? _), g = r(() => n.color ?? V), m = r(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (c, G) => (o(), e("svg", v({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(g),
      transform: t(m)
    }, c.$attrs), [
      H(c.$slots, "default"),
      t(a) === "bold" ? (o(), e("g", w, Z)) : t(a) === "duotone" ? (o(), e("g", k, z)) : t(a) === "fill" ? (o(), e("g", C, A)) : t(a) === "light" ? (o(), e("g", N, b)) : t(a) === "regular" ? (o(), e("g", E, $)) : t(a) === "thin" ? (o(), e("g", j, D)) : y("", !0)
    ], 16, f));
  }
});
export {
  J as default
};
