import { defineComponent as V, inject as i, computed as l, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as f, createCommentVNode as v, createElementVNode as s } from "vue";
const w = ["width", "height", "fill", "transform"], L = { key: 0 }, M = /* @__PURE__ */ s("path", { d: "M212,80v88a68,68,0,0,1-136,0V61L48.49,88.49a12,12,0,0,1-17-17l48-48a12,12,0,0,1,17,0l48,48a12,12,0,0,1-17,17L100,61V168a44,44,0,0,0,88,0V80a12,12,0,0,1,24,0Z" }, null, -1), k = [
  M
], Z = { key: 1 }, x = /* @__PURE__ */ s("path", {
  d: "M136,80H40L88,32Z",
  opacity: "0.2"
}, null, -1), S = /* @__PURE__ */ s("path", { d: "M200,72a8,8,0,0,0-8,8v88a48,48,0,0,1-96,0V88h40a8,8,0,0,0,5.66-13.66l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,40,88H80v80a64,64,0,0,0,128,0V80A8,8,0,0,0,200,72ZM88,43.31,116.69,72H59.31Z" }, null, -1), z = [
  x,
  S
], A = { key: 2 }, C = /* @__PURE__ */ s("path", { d: "M208,80v88a64,64,0,0,1-128,0V88H40a8,8,0,0,1-5.66-13.66l48-48a8,8,0,0,1,11.32,0l48,48A8,8,0,0,1,136,88H96v80a48,48,0,0,0,96,0V80a8,8,0,0,1,16,0Z" }, null, -1), H = [
  C
], B = { key: 3 }, N = /* @__PURE__ */ s("path", { d: "M206,80v88a62,62,0,0,1-124,0V46.49L44.24,84.24a6,6,0,0,1-8.48-8.48l48-48a6,6,0,0,1,8.48,0l48,48a6,6,0,1,1-8.48,8.48L94,46.49V168a50,50,0,0,0,100,0V80a6,6,0,0,1,12,0Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M208,80v88a64,64,0,0,1-128,0V51.31L45.66,85.66A8,8,0,0,1,34.34,74.34l48-48a8,8,0,0,1,11.32,0l48,48a8,8,0,0,1-11.32,11.32L96,51.31V168a48,48,0,0,0,96,0V80a8,8,0,0,1,16,0Z" }, null, -1), U = [
  P
], W = { key: 5 }, $ = /* @__PURE__ */ s("path", { d: "M204,80v88a60,60,0,0,1-120,0V41.66L42.83,82.83a4,4,0,0,1-5.66-5.66l48-48a4,4,0,0,1,5.66,0l48,48a4,4,0,0,1-5.66,5.66L92,41.66V168a52,52,0,0,0,104,0V80a4,4,0,0,1,8,0Z" }, null, -1), j = [
  $
], q = {
  name: "PhArrowULeftUp"
}, G = /* @__PURE__ */ V({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const a = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), n = l(() => a.weight ?? _), r = l(() => a.size ?? h), u = l(() => a.color ?? p), m = l(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(r),
      height: t(r),
      fill: t(u),
      transform: t(m)
    }, d.$attrs), [
      f(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", L, k)) : t(n) === "duotone" ? (o(), e("g", Z, z)) : t(n) === "fill" ? (o(), e("g", A, H)) : t(n) === "light" ? (o(), e("g", B, b)) : t(n) === "regular" ? (o(), e("g", E, U)) : t(n) === "thin" ? (o(), e("g", W, j)) : v("", !0)
    ], 16, w));
  }
});
export {
  G as default
};
