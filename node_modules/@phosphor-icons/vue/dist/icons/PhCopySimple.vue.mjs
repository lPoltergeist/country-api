import { defineComponent as g, inject as a, computed as r, openBlock as o, createElementBlock as e, mergeProps as u, unref as t, renderSlot as Z, createCommentVNode as y, createElementVNode as s } from "vue";
const M = ["width", "height", "fill", "transform"], f = { key: 0 }, A = /* @__PURE__ */ s("path", { d: "M180,64H40A12,12,0,0,0,28,76V216a12,12,0,0,0,12,12H180a12,12,0,0,0,12-12V76A12,12,0,0,0,180,64ZM168,204H52V88H168ZM228,40V180a12,12,0,0,1-24,0V52H76a12,12,0,0,1,0-24H216A12,12,0,0,1,228,40Z" }, null, -1), w = [
  A
], k = { key: 1 }, S = /* @__PURE__ */ s("path", {
  d: "M184,72V216H40V72Z",
  opacity: "0.2"
}, null, -1), v = /* @__PURE__ */ s("path", { d: "M184,64H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H184a8,8,0,0,0,8-8V72A8,8,0,0,0,184,64Zm-8,144H48V80H176ZM224,40V184a8,8,0,0,1-16,0V48H72a8,8,0,0,1,0-16H216A8,8,0,0,1,224,40Z" }, null, -1), x = [
  S,
  v
], C = { key: 2 }, z = /* @__PURE__ */ s("path", { d: "M192,72V216a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V72a8,8,0,0,1,8-8H184A8,8,0,0,1,192,72Zm24-40H72a8,8,0,0,0,0,16H208V184a8,8,0,0,0,16,0V40A8,8,0,0,0,216,32Z" }, null, -1), B = [
  z
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M184,66H40a6,6,0,0,0-6,6V216a6,6,0,0,0,6,6H184a6,6,0,0,0,6-6V72A6,6,0,0,0,184,66Zm-6,144H46V78H178ZM222,40V184a6,6,0,0,1-12,0V46H72a6,6,0,0,1,0-12H216A6,6,0,0,1,222,40Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ s("path", { d: "M184,64H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H184a8,8,0,0,0,8-8V72A8,8,0,0,0,184,64Zm-8,144H48V80H176ZM224,40V184a8,8,0,0,1-16,0V48H72a8,8,0,0,1,0-16H216A8,8,0,0,1,224,40Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ s("path", { d: "M184,68H40a4,4,0,0,0-4,4V216a4,4,0,0,0,4,4H184a4,4,0,0,0,4-4V72A4,4,0,0,0,184,68Zm-4,144H44V76H180ZM220,40V184a4,4,0,0,1-8,0V44H72a4,4,0,0,1,0-8H216A4,4,0,0,1,220,40Z" }, null, -1), D = [
  q
], F = {
  name: "PhCopySimple"
}, J = /* @__PURE__ */ g({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = a("weight", "regular"), h = a("size", "1em"), H = a("color", "currentColor"), V = a("mirrored", !1), n = r(() => i.weight ?? _), d = r(() => i.size ?? h), p = r(() => i.color ?? H), m = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : V ? "scale(-1, 1)" : void 0);
    return (c, G) => (o(), e("svg", u({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(p),
      transform: t(m)
    }, c.$attrs), [
      Z(c.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", f, w)) : t(n) === "duotone" ? (o(), e("g", k, x)) : t(n) === "fill" ? (o(), e("g", C, B)) : t(n) === "light" ? (o(), e("g", N, E)) : t(n) === "regular" ? (o(), e("g", P, $)) : t(n) === "thin" ? (o(), e("g", j, D)) : y("", !0)
    ], 16, M));
  }
});
export {
  J as default
};
