import {
  __commonJS,
  __require
} from "./chunk-7FP5O474.js";

// ../../../node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "../../../node_modules/util/support/isBufferBrowser.js"(exports, module) {
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// ../../../node_modules/util/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../../node_modules/util/node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
  }
});

// ../../../node_modules/util/util.js
var require_util = __commonJS({
  "../../../node_modules/util/util.js"(exports) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x2) {
        if (x2 === "%%")
          return "%";
        if (i >= len)
          return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || "";
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined(ctx.depth))
        ctx.depth = 2;
      if (isUndefined(ctx.colors))
        ctx.colors = false;
      if (isUndefined(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0)
          numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require_inherits_browser();
    exports._extend = function(origin, add) {
      if (!add || !isObject(add))
        return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol)
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self = this;
        var cb = function() {
          return maybeCb.apply(self, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb, null, ret);
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected, rej, cb);
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports.callbackify = callbackify;
  }
});

// ../../../node_modules/yargs/lib/is-promise.js
var require_is_promise = __commonJS({
  "../../../node_modules/yargs/lib/is-promise.js"(exports, module) {
    module.exports = function isPromise(maybePromise) {
      return maybePromise instanceof Promise;
    };
  }
});

// ../../../node_modules/yargs/lib/middleware.js
var require_middleware = __commonJS({
  "../../../node_modules/yargs/lib/middleware.js"(exports, module) {
    "use strict";
    module.exports = {
      applyMiddleware,
      commandMiddlewareFactory,
      globalMiddlewareFactory
    };
    var isPromise = require_is_promise();
    var argsert = require_argsert();
    function globalMiddlewareFactory(globalMiddleware, context) {
      return function(callback, applyBeforeValidation = false) {
        argsert("<array|function> [boolean]", [callback, applyBeforeValidation], arguments.length);
        if (Array.isArray(callback)) {
          for (let i = 0; i < callback.length; i++) {
            if (typeof callback[i] !== "function") {
              throw Error("middleware must be a function");
            }
            callback[i].applyBeforeValidation = applyBeforeValidation;
          }
          Array.prototype.push.apply(globalMiddleware, callback);
        } else if (typeof callback === "function") {
          callback.applyBeforeValidation = applyBeforeValidation;
          globalMiddleware.push(callback);
        }
        return context;
      };
    }
    function commandMiddlewareFactory(commandMiddleware) {
      if (!commandMiddleware)
        return [];
      return commandMiddleware.map((middleware) => {
        middleware.applyBeforeValidation = false;
        return middleware;
      });
    }
    function applyMiddleware(argv, yargs, middlewares, beforeValidation) {
      const beforeValidationError = new Error("middleware cannot return a promise when applyBeforeValidation is true");
      return middlewares.reduce((accumulation, middleware) => {
        if (middleware.applyBeforeValidation !== beforeValidation && !isPromise(accumulation)) {
          return accumulation;
        }
        if (isPromise(accumulation)) {
          return accumulation.then(
            (initialObj) => Promise.all([initialObj, middleware(initialObj, yargs)])
          ).then(
            ([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj)
          );
        } else {
          const result = middleware(argv, yargs);
          if (beforeValidation && isPromise(result))
            throw beforeValidationError;
          return isPromise(result) ? result.then((middlewareObj) => Object.assign(accumulation, middlewareObj)) : Object.assign(accumulation, result);
        }
      }, argv);
    }
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../../node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "../../../node_modules/camelcase/index.js"(exports, module) {
    "use strict";
    var preserveCamelCase = (string) => {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < string.length; i++) {
        const character = string[i];
        if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {
          string = string.slice(0, i) + "-" + string.slice(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {
          string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;
        }
      }
      return string;
    };
    var camelCase = (input, options) => {
      if (!(typeof input === "string" || Array.isArray(input))) {
        throw new TypeError("Expected the input to be `string | string[]`");
      }
      options = Object.assign({
        pascalCase: false
      }, options);
      const postProcess = (x) => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;
      if (Array.isArray(input)) {
        input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
      } else {
        input = input.trim();
      }
      if (input.length === 0) {
        return "";
      }
      if (input.length === 1) {
        return options.pascalCase ? input.toUpperCase() : input.toLowerCase();
      }
      const hasUpperCase = input !== input.toLowerCase();
      if (hasUpperCase) {
        input = preserveCamelCase(input);
      }
      input = input.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (_, p1) => p1.toUpperCase()).replace(/\d+(\w|$)/g, (m) => m.toUpperCase());
      return postProcess(input);
    };
    module.exports = camelCase;
    module.exports.default = camelCase;
  }
});

// ../../../node_modules/decamelize/index.js
var require_decamelize = __commonJS({
  "../../../node_modules/decamelize/index.js"(exports, module) {
    "use strict";
    module.exports = function(str, sep) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      sep = typeof sep === "undefined" ? "_" : sep;
      return str.replace(/([a-z\d])([A-Z])/g, "$1" + sep + "$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1" + sep + "$2").toLowerCase();
    };
  }
});

// ../../../node_modules/yargs-parser/lib/tokenize-arg-string.js
var require_tokenize_arg_string = __commonJS({
  "../../../node_modules/yargs-parser/lib/tokenize-arg-string.js"(exports, module) {
    module.exports = function(argString) {
      if (Array.isArray(argString)) {
        return argString.map((e) => typeof e !== "string" ? e + "" : e);
      }
      argString = argString.trim();
      var i = 0;
      var prevC = null;
      var c = null;
      var opening = null;
      var args = [];
      for (var ii = 0; ii < argString.length; ii++) {
        prevC = c;
        c = argString.charAt(ii);
        if (c === " " && !opening) {
          if (!(prevC === " ")) {
            i++;
          }
          continue;
        }
        if (c === opening) {
          opening = null;
        } else if ((c === "'" || c === '"') && !opening) {
          opening = c;
        }
        if (!args[i])
          args[i] = "";
        args[i] += c;
      }
      return args;
    };
  }
});

// ../../../node_modules/yargs-parser/index.js
var require_yargs_parser = __commonJS({
  "../../../node_modules/yargs-parser/index.js"(exports, module) {
    var camelCase = require_camelcase();
    var decamelize = require_decamelize();
    var path = require_path();
    var tokenizeArgString = require_tokenize_arg_string();
    var util = require_util();
    function parse(args, opts) {
      if (!opts)
        opts = {};
      args = tokenizeArgString(args);
      var aliases = combineAliases(opts.alias || {});
      var configuration = Object.assign({
        "short-option-groups": true,
        "camel-case-expansion": true,
        "dot-notation": true,
        "parse-numbers": true,
        "boolean-negation": true,
        "negation-prefix": "no-",
        "duplicate-arguments-array": true,
        "flatten-duplicate-arrays": true,
        "populate--": false,
        "combine-arrays": false,
        "set-placeholder-key": false,
        "halt-at-non-option": false,
        "strip-aliased": false,
        "strip-dashed": false
      }, opts.configuration);
      var defaults = opts.default || {};
      var configObjects = opts.configObjects || [];
      var envPrefix = opts.envPrefix;
      var notFlagsOption = configuration["populate--"];
      var notFlagsArgv = notFlagsOption ? "--" : "_";
      var newAliases = {};
      var __ = opts.__ || util.format;
      var error = null;
      var flags = {
        aliases: {},
        arrays: {},
        bools: {},
        strings: {},
        numbers: {},
        counts: {},
        normalize: {},
        configs: {},
        defaulted: {},
        nargs: {},
        coercions: {},
        keys: []
      };
      var negative = /^-[0-9]+(\.[0-9]+)?/;
      var negatedBoolean = new RegExp("^--" + configuration["negation-prefix"] + "(.+)");
      [].concat(opts.array).filter(Boolean).forEach(function(opt) {
        var key2 = opt.key || opt;
        const assignment = Object.keys(opt).map(function(key3) {
          return {
            boolean: "bools",
            string: "strings",
            number: "numbers"
          }[key3];
        }).filter(Boolean).pop();
        if (assignment) {
          flags[assignment][key2] = true;
        }
        flags.arrays[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.boolean).filter(Boolean).forEach(function(key2) {
        flags.bools[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.string).filter(Boolean).forEach(function(key2) {
        flags.strings[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.number).filter(Boolean).forEach(function(key2) {
        flags.numbers[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.count).filter(Boolean).forEach(function(key2) {
        flags.counts[key2] = true;
        flags.keys.push(key2);
      });
      [].concat(opts.normalize).filter(Boolean).forEach(function(key2) {
        flags.normalize[key2] = true;
        flags.keys.push(key2);
      });
      Object.keys(opts.narg || {}).forEach(function(k) {
        flags.nargs[k] = opts.narg[k];
        flags.keys.push(k);
      });
      Object.keys(opts.coerce || {}).forEach(function(k) {
        flags.coercions[k] = opts.coerce[k];
        flags.keys.push(k);
      });
      if (Array.isArray(opts.config) || typeof opts.config === "string") {
        ;
        [].concat(opts.config).filter(Boolean).forEach(function(key2) {
          flags.configs[key2] = true;
        });
      } else {
        Object.keys(opts.config || {}).forEach(function(k) {
          flags.configs[k] = opts.config[k];
        });
      }
      extendAliases(opts.key, aliases, opts.default, flags.arrays);
      Object.keys(defaults).forEach(function(key2) {
        (flags.aliases[key2] || []).forEach(function(alias) {
          defaults[alias] = defaults[key2];
        });
      });
      var argv = { _: [] };
      Object.keys(flags.bools).forEach(function(key2) {
        if (Object.prototype.hasOwnProperty.call(defaults, key2)) {
          setArg(key2, defaults[key2]);
          setDefaulted(key2);
        }
      });
      var notFlags = [];
      for (var i = 0; i < args.length; i++) {
        var arg = args[i];
        var broken;
        var key;
        var letters;
        var m;
        var next;
        var value;
        if (arg.match(/^--.+=/) || !configuration["short-option-groups"] && arg.match(/^-.+=/)) {
          m = arg.match(/^--?([^=]+)=([\s\S]*)$/);
          if (checkAllAliases(m[1], flags.nargs)) {
            args.splice(i + 1, 0, m[2]);
            i = eatNargs(i, m[1], args);
          } else if (checkAllAliases(m[1], flags.arrays) && args.length > i + 1) {
            args.splice(i + 1, 0, m[2]);
            i = eatArray(i, m[1], args);
          } else {
            setArg(m[1], m[2]);
          }
        } else if (arg.match(negatedBoolean) && configuration["boolean-negation"]) {
          key = arg.match(negatedBoolean)[1];
          setArg(key, false);
        } else if (arg.match(/^--.+/) || !configuration["short-option-groups"] && arg.match(/^-[^-]+/)) {
          key = arg.match(/^--?(.+)/)[1];
          if (checkAllAliases(key, flags.nargs)) {
            i = eatNargs(i, key, args);
          } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {
            i = eatArray(i, key, args);
          } else {
            next = flags.nargs[key] === 0 ? void 0 : args[i + 1];
            if (next !== void 0 && (!next.match(/^-/) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
              setArg(key, next);
              i++;
            } else if (/^(true|false)$/.test(next)) {
              setArg(key, next);
              i++;
            } else {
              setArg(key, defaultValue(key));
            }
          }
        } else if (arg.match(/^-.\..+=/)) {
          m = arg.match(/^-([^=]+)=([\s\S]*)$/);
          setArg(m[1], m[2]);
        } else if (arg.match(/^-.\..+/)) {
          next = args[i + 1];
          key = arg.match(/^-(.\..+)/)[1];
          if (next !== void 0 && !next.match(/^-/) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
            setArg(key, next);
            i++;
          } else {
            setArg(key, defaultValue(key));
          }
        } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {
          letters = arg.slice(1, -1).split("");
          broken = false;
          for (var j = 0; j < letters.length; j++) {
            next = arg.slice(j + 2);
            if (letters[j + 1] && letters[j + 1] === "=") {
              value = arg.slice(j + 3);
              key = letters[j];
              if (checkAllAliases(key, flags.nargs)) {
                args.splice(i + 1, 0, value);
                i = eatNargs(i, key, args);
              } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {
                args.splice(i + 1, 0, value);
                i = eatArray(i, key, args);
              } else {
                setArg(key, value);
              }
              broken = true;
              break;
            }
            if (next === "-") {
              setArg(letters[j], next);
              continue;
            }
            if (/[A-Za-z]/.test(letters[j]) && /^-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
              setArg(letters[j], next);
              broken = true;
              break;
            }
            if (letters[j + 1] && letters[j + 1].match(/\W/)) {
              setArg(letters[j], next);
              broken = true;
              break;
            } else {
              setArg(letters[j], defaultValue(letters[j]));
            }
          }
          key = arg.slice(-1)[0];
          if (!broken && key !== "-") {
            if (checkAllAliases(key, flags.nargs)) {
              i = eatNargs(i, key, args);
            } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {
              i = eatArray(i, key, args);
            } else {
              next = args[i + 1];
              if (next !== void 0 && (!/^(-|--)[^-]/.test(next) || next.match(negative)) && !checkAllAliases(key, flags.bools) && !checkAllAliases(key, flags.counts)) {
                setArg(key, next);
                i++;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next);
                i++;
              } else {
                setArg(key, defaultValue(key));
              }
            }
          }
        } else if (arg === "--") {
          notFlags = args.slice(i + 1);
          break;
        } else if (configuration["halt-at-non-option"]) {
          notFlags = args.slice(i);
          break;
        } else {
          argv._.push(maybeCoerceNumber("_", arg));
        }
      }
      applyEnvVars(argv, true);
      applyEnvVars(argv, false);
      setConfig(argv);
      setConfigObjects();
      applyDefaultsAndAliases(argv, flags.aliases, defaults);
      applyCoercions(argv);
      if (configuration["set-placeholder-key"])
        setPlaceholderKeys(argv);
      Object.keys(flags.counts).forEach(function(key2) {
        if (!hasKey(argv, key2.split(".")))
          setArg(key2, 0);
      });
      if (notFlagsOption && notFlags.length)
        argv[notFlagsArgv] = [];
      notFlags.forEach(function(key2) {
        argv[notFlagsArgv].push(key2);
      });
      if (configuration["camel-case-expansion"] && configuration["strip-dashed"]) {
        Object.keys(argv).filter((key2) => key2 !== "--" && key2.includes("-")).forEach((key2) => {
          delete argv[key2];
        });
      }
      if (configuration["strip-aliased"]) {
        ;
        [].concat(...Object.keys(aliases).map((k) => aliases[k])).forEach((alias) => {
          if (configuration["camel-case-expansion"]) {
            delete argv[alias.split(".").map((prop) => camelCase(prop)).join(".")];
          }
          delete argv[alias];
        });
      }
      function eatNargs(i2, key2, args2) {
        var ii;
        const toEat = checkAllAliases(key2, flags.nargs);
        var available = 0;
        for (ii = i2 + 1; ii < args2.length; ii++) {
          if (!args2[ii].match(/^-[^0-9]/))
            available++;
          else
            break;
        }
        if (available < toEat)
          error = Error(__("Not enough arguments following: %s", key2));
        const consumed = Math.min(available, toEat);
        for (ii = i2 + 1; ii < consumed + i2 + 1; ii++) {
          setArg(key2, args2[ii]);
        }
        return i2 + consumed;
      }
      function eatArray(i2, key2, args2) {
        var start = i2 + 1;
        var argsToSet = [];
        var multipleArrayFlag = i2 > 0;
        for (var ii = i2 + 1; ii < args2.length; ii++) {
          if (/^-/.test(args2[ii]) && !negative.test(args2[ii])) {
            if (ii === start) {
              setArg(key2, defaultForType("array"));
            }
            multipleArrayFlag = true;
            break;
          }
          i2 = ii;
          argsToSet.push(args2[ii]);
        }
        if (multipleArrayFlag) {
          setArg(key2, argsToSet.map(function(arg2) {
            return processValue(key2, arg2);
          }));
        } else {
          argsToSet.forEach(function(arg2) {
            setArg(key2, arg2);
          });
        }
        return i2;
      }
      function setArg(key2, val) {
        unsetDefaulted(key2);
        if (/-/.test(key2) && configuration["camel-case-expansion"]) {
          var alias = key2.split(".").map(function(prop) {
            return camelCase(prop);
          }).join(".");
          addNewAlias(key2, alias);
        }
        var value2 = processValue(key2, val);
        var splitKey = key2.split(".");
        setKey(argv, splitKey, value2);
        if (flags.aliases[key2] && flags.aliases[key2].forEach) {
          flags.aliases[key2].forEach(function(x) {
            x = x.split(".");
            setKey(argv, x, value2);
          });
        }
        if (splitKey.length > 1 && configuration["dot-notation"]) {
          ;
          (flags.aliases[splitKey[0]] || []).forEach(function(x) {
            x = x.split(".");
            var a = [].concat(splitKey);
            a.shift();
            x = x.concat(a);
            setKey(argv, x, value2);
          });
        }
        if (checkAllAliases(key2, flags.normalize) && !checkAllAliases(key2, flags.arrays)) {
          var keys = [key2].concat(flags.aliases[key2] || []);
          keys.forEach(function(key3) {
            argv.__defineSetter__(key3, function(v) {
              val = path.normalize(v);
            });
            argv.__defineGetter__(key3, function() {
              return typeof val === "string" ? path.normalize(val) : val;
            });
          });
        }
      }
      function addNewAlias(key2, alias) {
        if (!(flags.aliases[key2] && flags.aliases[key2].length)) {
          flags.aliases[key2] = [alias];
          newAliases[alias] = true;
        }
        if (!(flags.aliases[alias] && flags.aliases[alias].length)) {
          addNewAlias(alias, key2);
        }
      }
      function processValue(key2, val) {
        if (typeof val === "string" && (val[0] === "'" || val[0] === '"') && val[val.length - 1] === val[0]) {
          val = val.substring(1, val.length - 1);
        }
        if (checkAllAliases(key2, flags.bools) || checkAllAliases(key2, flags.counts)) {
          if (typeof val === "string")
            val = val === "true";
        }
        var value2 = maybeCoerceNumber(key2, val);
        if (checkAllAliases(key2, flags.counts) && (isUndefined(value2) || typeof value2 === "boolean")) {
          value2 = increment;
        }
        if (checkAllAliases(key2, flags.normalize) && checkAllAliases(key2, flags.arrays)) {
          if (Array.isArray(val))
            value2 = val.map(path.normalize);
          else
            value2 = path.normalize(val);
        }
        return value2;
      }
      function maybeCoerceNumber(key2, value2) {
        if (!checkAllAliases(key2, flags.strings) && !checkAllAliases(key2, flags.coercions)) {
          const shouldCoerceNumber = isNumber(value2) && configuration["parse-numbers"] && Number.isSafeInteger(Math.floor(value2));
          if (shouldCoerceNumber || !isUndefined(value2) && checkAllAliases(key2, flags.numbers))
            value2 = Number(value2);
        }
        return value2;
      }
      function setConfig(argv2) {
        var configLookup = {};
        applyDefaultsAndAliases(configLookup, flags.aliases, defaults);
        Object.keys(flags.configs).forEach(function(configKey) {
          var configPath = argv2[configKey] || configLookup[configKey];
          if (configPath) {
            try {
              var config = null;
              var resolvedConfigPath = path.resolve(process.cwd(), configPath);
              if (typeof flags.configs[configKey] === "function") {
                try {
                  config = flags.configs[configKey](resolvedConfigPath);
                } catch (e) {
                  config = e;
                }
                if (config instanceof Error) {
                  error = config;
                  return;
                }
              } else {
                config = __require(resolvedConfigPath);
              }
              setConfigObject(config);
            } catch (ex) {
              if (argv2[configKey])
                error = Error(__("Invalid JSON config file: %s", configPath));
            }
          }
        });
      }
      function setConfigObject(config, prev) {
        Object.keys(config).forEach(function(key2) {
          var value2 = config[key2];
          var fullKey = prev ? prev + "." + key2 : key2;
          if (typeof value2 === "object" && value2 !== null && !Array.isArray(value2) && configuration["dot-notation"]) {
            setConfigObject(value2, fullKey);
          } else {
            if (!hasKey(argv, fullKey.split(".")) || flags.defaulted[fullKey] || flags.arrays[fullKey] && configuration["combine-arrays"]) {
              setArg(fullKey, value2);
            }
          }
        });
      }
      function setConfigObjects() {
        if (typeof configObjects === "undefined")
          return;
        configObjects.forEach(function(configObject) {
          setConfigObject(configObject);
        });
      }
      function applyEnvVars(argv2, configOnly) {
        if (typeof envPrefix === "undefined")
          return;
        var prefix = typeof envPrefix === "string" ? envPrefix : "";
        Object.keys(process.env).forEach(function(envVar) {
          if (prefix === "" || envVar.lastIndexOf(prefix, 0) === 0) {
            var keys = envVar.split("__").map(function(key2, i2) {
              if (i2 === 0) {
                key2 = key2.substring(prefix.length);
              }
              return camelCase(key2);
            });
            if ((configOnly && flags.configs[keys.join(".")] || !configOnly) && (!hasKey(argv2, keys) || flags.defaulted[keys.join(".")])) {
              setArg(keys.join("."), process.env[envVar]);
            }
          }
        });
      }
      function applyCoercions(argv2) {
        var coerce;
        var applied = {};
        Object.keys(argv2).forEach(function(key2) {
          if (!applied.hasOwnProperty(key2)) {
            coerce = checkAllAliases(key2, flags.coercions);
            if (typeof coerce === "function") {
              try {
                var value2 = coerce(argv2[key2]);
                [].concat(flags.aliases[key2] || [], key2).forEach((ali) => {
                  applied[ali] = argv2[ali] = value2;
                });
              } catch (err) {
                error = err;
              }
            }
          }
        });
      }
      function setPlaceholderKeys(argv2) {
        flags.keys.forEach((key2) => {
          if (~key2.indexOf("."))
            return;
          if (typeof argv2[key2] === "undefined")
            argv2[key2] = void 0;
        });
        return argv2;
      }
      function applyDefaultsAndAliases(obj, aliases2, defaults2) {
        Object.keys(defaults2).forEach(function(key2) {
          if (!hasKey(obj, key2.split("."))) {
            setKey(obj, key2.split("."), defaults2[key2]);
            (aliases2[key2] || []).forEach(function(x) {
              if (hasKey(obj, x.split(".")))
                return;
              setKey(obj, x.split("."), defaults2[key2]);
            });
          }
        });
      }
      function hasKey(obj, keys) {
        var o = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key3) {
          o = o[key3] || {};
        });
        var key2 = keys[keys.length - 1];
        if (typeof o !== "object")
          return false;
        else
          return key2 in o;
      }
      function setKey(obj, keys, value2) {
        var o = obj;
        if (!configuration["dot-notation"])
          keys = [keys.join(".")];
        keys.slice(0, -1).forEach(function(key3, index) {
          key3 = sanitizeKey(key3);
          if (typeof o === "object" && o[key3] === void 0) {
            o[key3] = {};
          }
          if (typeof o[key3] !== "object" || Array.isArray(o[key3])) {
            if (Array.isArray(o[key3])) {
              o[key3].push({});
            } else {
              o[key3] = [o[key3], {}];
            }
            o = o[key3][o[key3].length - 1];
          } else {
            o = o[key3];
          }
        });
        const key2 = sanitizeKey(keys[keys.length - 1]);
        const isTypeArray = checkAllAliases(keys.join("."), flags.arrays);
        const isValueArray = Array.isArray(value2);
        let duplicate = configuration["duplicate-arguments-array"];
        if (!duplicate && checkAllAliases(key2, flags.nargs)) {
          duplicate = true;
          if (!isUndefined(o[key2]) && flags.nargs[key2] === 1 || Array.isArray(o[key2]) && o[key2].length === flags.nargs[key2]) {
            o[key2] = void 0;
          }
        }
        if (value2 === increment) {
          o[key2] = increment(o[key2]);
        } else if (Array.isArray(o[key2])) {
          if (duplicate && isTypeArray && isValueArray) {
            o[key2] = configuration["flatten-duplicate-arrays"] ? o[key2].concat(value2) : (Array.isArray(o[key2][0]) ? o[key2] : [o[key2]]).concat([value2]);
          } else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {
            o[key2] = value2;
          } else {
            o[key2] = o[key2].concat([value2]);
          }
        } else if (o[key2] === void 0 && isTypeArray) {
          o[key2] = isValueArray ? value2 : [value2];
        } else if (duplicate && !(o[key2] === void 0 || checkAllAliases(key2, flags.bools) || checkAllAliases(keys.join("."), flags.bools) || checkAllAliases(key2, flags.counts))) {
          o[key2] = [o[key2], value2];
        } else {
          o[key2] = value2;
        }
      }
      function extendAliases(...args2) {
        args2.forEach(function(obj) {
          Object.keys(obj || {}).forEach(function(key2) {
            if (flags.aliases[key2])
              return;
            flags.aliases[key2] = [].concat(aliases[key2] || []);
            flags.aliases[key2].concat(key2).forEach(function(x) {
              if (/-/.test(x) && configuration["camel-case-expansion"]) {
                var c = camelCase(x);
                if (c !== key2 && flags.aliases[key2].indexOf(c) === -1) {
                  flags.aliases[key2].push(c);
                  newAliases[c] = true;
                }
              }
            });
            flags.aliases[key2].concat(key2).forEach(function(x) {
              if (x.length > 1 && /[A-Z]/.test(x) && configuration["camel-case-expansion"]) {
                var c = decamelize(x, "-");
                if (c !== key2 && flags.aliases[key2].indexOf(c) === -1) {
                  flags.aliases[key2].push(c);
                  newAliases[c] = true;
                }
              }
            });
            flags.aliases[key2].forEach(function(x) {
              flags.aliases[x] = [key2].concat(flags.aliases[key2].filter(function(y) {
                return x !== y;
              }));
            });
          });
        });
      }
      function checkAllAliases(key2, flag) {
        var isSet = false;
        var toCheck = [].concat(flags.aliases[key2] || [], key2);
        toCheck.forEach(function(key3) {
          if (flag[key3])
            isSet = flag[key3];
        });
        return isSet;
      }
      function setDefaulted(key2) {
        [].concat(flags.aliases[key2] || [], key2).forEach(function(k) {
          flags.defaulted[k] = true;
        });
      }
      function unsetDefaulted(key2) {
        [].concat(flags.aliases[key2] || [], key2).forEach(function(k) {
          delete flags.defaulted[k];
        });
      }
      function defaultValue(key2) {
        if (!checkAllAliases(key2, flags.bools) && !checkAllAliases(key2, flags.counts) && `${key2}` in defaults) {
          return defaults[key2];
        } else {
          return defaultForType(guessType(key2));
        }
      }
      function defaultForType(type) {
        var def = {
          boolean: true,
          string: "",
          number: void 0,
          array: []
        };
        return def[type];
      }
      function guessType(key2) {
        var type = "boolean";
        if (checkAllAliases(key2, flags.strings))
          type = "string";
        else if (checkAllAliases(key2, flags.numbers))
          type = "number";
        else if (checkAllAliases(key2, flags.arrays))
          type = "array";
        return type;
      }
      function isNumber(x) {
        if (x === null || x === void 0)
          return false;
        if (typeof x === "number")
          return true;
        if (/^0x[0-9a-f]+$/i.test(x))
          return true;
        if (x.length > 1 && x[0] === "0")
          return false;
        return /^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
      }
      function isUndefined(num) {
        return num === void 0;
      }
      return {
        argv,
        error,
        aliases: flags.aliases,
        newAliases,
        configuration
      };
    }
    function combineAliases(aliases) {
      var aliasArrays = [];
      var change = true;
      var combined = {};
      Object.keys(aliases).forEach(function(key) {
        aliasArrays.push(
          [].concat(aliases[key], key)
        );
      });
      while (change) {
        change = false;
        for (var i = 0; i < aliasArrays.length; i++) {
          for (var ii = i + 1; ii < aliasArrays.length; ii++) {
            var intersect = aliasArrays[i].filter(function(v) {
              return aliasArrays[ii].indexOf(v) !== -1;
            });
            if (intersect.length) {
              aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);
              aliasArrays.splice(ii, 1);
              change = true;
              break;
            }
          }
        }
      }
      aliasArrays.forEach(function(aliasArray) {
        aliasArray = aliasArray.filter(function(v, i2, self) {
          return self.indexOf(v) === i2;
        });
        combined[aliasArray.pop()] = aliasArray;
      });
      return combined;
    }
    function increment(orig) {
      return orig !== void 0 ? orig + 1 : 1;
    }
    function Parser(args, opts) {
      var result = parse(args.slice(), opts);
      return result.argv;
    }
    Parser.detailed = function(args, opts) {
      return parse(args.slice(), opts);
    };
    function sanitizeKey(key) {
      if (key === "__proto__")
        return "___proto___";
      return key;
    }
    module.exports = Parser;
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../../node_modules/require-directory/index.js
var require_require_directory = __commonJS({
  "../../../node_modules/require-directory/index.js"(exports, module) {
    "use strict";
    var fs = require_fs();
    var join = require_path().join;
    var resolve = require_path().resolve;
    var dirname = require_path().dirname;
    var defaultOptions = {
      extensions: ["js", "json", "coffee"],
      recurse: true,
      rename: function(name) {
        return name;
      },
      visit: function(obj) {
        return obj;
      }
    };
    function checkFileInclusion(path, filename, options) {
      return (
        // verify file has valid extension
        new RegExp("\\.(" + options.extensions.join("|") + ")$", "i").test(filename) && // if options.include is a RegExp, evaluate it and make sure the path passes
        !(options.include && options.include instanceof RegExp && !options.include.test(path)) && // if options.include is a function, evaluate it and make sure the path passes
        !(options.include && typeof options.include === "function" && !options.include(path, filename)) && // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass
        !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) && // if options.exclude is a function, evaluate it and make sure the path doesn't pass
        !(options.exclude && typeof options.exclude === "function" && options.exclude(path, filename))
      );
    }
    function requireDirectory(m, path, options) {
      var retval = {};
      if (path && !options && typeof path !== "string") {
        options = path;
        path = null;
      }
      options = options || {};
      for (var prop in defaultOptions) {
        if (typeof options[prop] === "undefined") {
          options[prop] = defaultOptions[prop];
        }
      }
      path = !path ? dirname(m.filename) : resolve(dirname(m.filename), path);
      fs.readdirSync(path).forEach(function(filename) {
        var joined = join(path, filename), files, key, obj;
        if (fs.statSync(joined).isDirectory() && options.recurse) {
          files = requireDirectory(m, joined, options);
          if (Object.keys(files).length) {
            retval[options.rename(filename, joined, filename)] = files;
          }
        } else {
          if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {
            key = filename.substring(0, filename.lastIndexOf("."));
            obj = m.require(joined);
            retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;
          }
        }
      });
      return retval;
    }
    module.exports = requireDirectory;
    module.exports.defaults = defaultOptions;
  }
});

// ../../../node_modules/which-module/index.js
var require_which_module = __commonJS({
  "../../../node_modules/which-module/index.js"(exports, module) {
    "use strict";
    module.exports = function whichModule(exported) {
      for (var i = 0, files = Object.keys(__require.cache), mod; i < files.length; i++) {
        mod = __require.cache[files[i]];
        if (mod.exports === exported)
          return mod;
      }
      return null;
    };
  }
});

// ../../../node_modules/yargs/lib/command.js
var require_command = __commonJS({
  "../../../node_modules/yargs/lib/command.js"(exports, module) {
    "use strict";
    var inspect = require_util().inspect;
    var isPromise = require_is_promise();
    var { applyMiddleware, commandMiddlewareFactory } = require_middleware();
    var path = require_path();
    var Parser = require_yargs_parser();
    var DEFAULT_MARKER = /(^\*)|(^\$0)/;
    module.exports = function command(yargs, usage, validation, globalMiddleware) {
      const self = {};
      let handlers = {};
      let aliasMap = {};
      let defaultCommand;
      globalMiddleware = globalMiddleware || [];
      self.addHandler = function addHandler(cmd, description, builder, handler, commandMiddleware) {
        let aliases = [];
        const middlewares = commandMiddlewareFactory(commandMiddleware);
        handler = handler || (() => {
        });
        if (Array.isArray(cmd)) {
          aliases = cmd.slice(1);
          cmd = cmd[0];
        } else if (typeof cmd === "object") {
          let command2 = Array.isArray(cmd.command) || typeof cmd.command === "string" ? cmd.command : moduleName(cmd);
          if (cmd.aliases)
            command2 = [].concat(command2).concat(cmd.aliases);
          self.addHandler(command2, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares);
          return;
        }
        if (typeof builder === "object" && builder.builder && typeof builder.handler === "function") {
          self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares);
          return;
        }
        const parsedCommand = self.parseCommand(cmd);
        aliases = aliases.map((alias) => self.parseCommand(alias).cmd);
        let isDefault = false;
        const parsedAliases = [parsedCommand.cmd].concat(aliases).filter((c) => {
          if (DEFAULT_MARKER.test(c)) {
            isDefault = true;
            return false;
          }
          return true;
        });
        if (parsedAliases.length === 0 && isDefault)
          parsedAliases.push("$0");
        if (isDefault) {
          parsedCommand.cmd = parsedAliases[0];
          aliases = parsedAliases.slice(1);
          cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);
        }
        aliases.forEach((alias) => {
          aliasMap[alias] = parsedCommand.cmd;
        });
        if (description !== false) {
          usage.command(cmd, description, isDefault, aliases);
        }
        handlers[parsedCommand.cmd] = {
          original: cmd,
          description,
          handler,
          builder: builder || {},
          middlewares: middlewares || [],
          demanded: parsedCommand.demanded,
          optional: parsedCommand.optional
        };
        if (isDefault)
          defaultCommand = handlers[parsedCommand.cmd];
      };
      self.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {
        opts = opts || {};
        if (typeof opts.recurse !== "boolean")
          opts.recurse = false;
        if (!Array.isArray(opts.extensions))
          opts.extensions = ["js"];
        const parentVisit = typeof opts.visit === "function" ? opts.visit : (o) => o;
        opts.visit = function visit(obj, joined, filename) {
          const visited = parentVisit(obj, joined, filename);
          if (visited) {
            if (~context.files.indexOf(joined))
              return visited;
            context.files.push(joined);
            self.addHandler(visited);
          }
          return visited;
        };
        require_require_directory()({ require: req, filename: callerFile }, dir, opts);
      };
      function moduleName(obj) {
        const mod = require_which_module()(obj);
        if (!mod)
          throw new Error(`No command name given for module: ${inspect(obj)}`);
        return commandFromFilename(mod.filename);
      }
      function commandFromFilename(filename) {
        return path.basename(filename, path.extname(filename));
      }
      function extractDesc(obj) {
        for (let keys = ["describe", "description", "desc"], i = 0, l = keys.length, test; i < l; i++) {
          test = obj[keys[i]];
          if (typeof test === "string" || typeof test === "boolean")
            return test;
        }
        return false;
      }
      self.parseCommand = function parseCommand(cmd) {
        const extraSpacesStrippedCommand = cmd.replace(/\s{2,}/g, " ");
        const splitCommand = extraSpacesStrippedCommand.split(/\s+(?![^[]*]|[^<]*>)/);
        const bregex = /\.*[\][<>]/g;
        const parsedCommand = {
          cmd: splitCommand.shift().replace(bregex, ""),
          demanded: [],
          optional: []
        };
        splitCommand.forEach((cmd2, i) => {
          let variadic = false;
          cmd2 = cmd2.replace(/\s/g, "");
          if (/\.+[\]>]/.test(cmd2) && i === splitCommand.length - 1)
            variadic = true;
          if (/^\[/.test(cmd2)) {
            parsedCommand.optional.push({
              cmd: cmd2.replace(bregex, "").split("|"),
              variadic
            });
          } else {
            parsedCommand.demanded.push({
              cmd: cmd2.replace(bregex, "").split("|"),
              variadic
            });
          }
        });
        return parsedCommand;
      };
      self.getCommands = () => Object.keys(handlers).concat(Object.keys(aliasMap));
      self.getCommandHandlers = () => handlers;
      self.hasDefaultCommand = () => !!defaultCommand;
      self.runCommand = function runCommand(command2, yargs2, parsed, commandIndex) {
        let aliases = parsed.aliases;
        const commandHandler = handlers[command2] || handlers[aliasMap[command2]] || defaultCommand;
        const currentContext = yargs2.getContext();
        let numFiles = currentContext.files.length;
        const parentCommands = currentContext.commands.slice();
        let innerArgv = parsed.argv;
        let innerYargs = null;
        let positionalMap = {};
        if (command2) {
          currentContext.commands.push(command2);
          currentContext.fullCommands.push(commandHandler.original);
        }
        if (typeof commandHandler.builder === "function") {
          innerYargs = commandHandler.builder(yargs2.reset(parsed.aliases));
          if (yargs2.parsed === false) {
            if (shouldUpdateUsage(yargs2)) {
              yargs2.getUsageInstance().usage(
                usageFromParentCommandsCommandHandler(parentCommands, commandHandler),
                commandHandler.description
              );
            }
            innerArgv = innerYargs ? innerYargs._parseArgs(null, null, true, commandIndex) : yargs2._parseArgs(null, null, true, commandIndex);
          } else {
            innerArgv = yargs2.parsed.argv;
          }
          if (innerYargs && yargs2.parsed === false)
            aliases = innerYargs.parsed.aliases;
          else
            aliases = yargs2.parsed.aliases;
        } else if (typeof commandHandler.builder === "object") {
          innerYargs = yargs2.reset(parsed.aliases);
          if (shouldUpdateUsage(innerYargs)) {
            innerYargs.getUsageInstance().usage(
              usageFromParentCommandsCommandHandler(parentCommands, commandHandler),
              commandHandler.description
            );
          }
          Object.keys(commandHandler.builder).forEach((key) => {
            innerYargs.option(key, commandHandler.builder[key]);
          });
          innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);
          aliases = innerYargs.parsed.aliases;
        }
        if (!yargs2._hasOutput()) {
          positionalMap = populatePositionals(commandHandler, innerArgv, currentContext, yargs2);
        }
        const middlewares = globalMiddleware.slice(0).concat(commandHandler.middlewares || []);
        applyMiddleware(innerArgv, yargs2, middlewares, true);
        if (!yargs2._hasOutput())
          yargs2._runValidation(innerArgv, aliases, positionalMap, yargs2.parsed.error);
        if (commandHandler.handler && !yargs2._hasOutput()) {
          yargs2._setHasOutput();
          innerArgv = applyMiddleware(innerArgv, yargs2, middlewares, false);
          const handlerResult = isPromise(innerArgv) ? innerArgv.then((argv) => commandHandler.handler(argv)) : commandHandler.handler(innerArgv);
          if (isPromise(handlerResult)) {
            handlerResult.catch(
              (error) => yargs2.getUsageInstance().fail(null, error)
            );
          }
        }
        if (command2) {
          currentContext.commands.pop();
          currentContext.fullCommands.pop();
        }
        numFiles = currentContext.files.length - numFiles;
        if (numFiles > 0)
          currentContext.files.splice(numFiles * -1, numFiles);
        return innerArgv;
      };
      function shouldUpdateUsage(yargs2) {
        return !yargs2.getUsageInstance().getUsageDisabled() && yargs2.getUsageInstance().getUsage().length === 0;
      }
      function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {
        const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, "").trim() : commandHandler.original;
        const pc = parentCommands.filter((c2) => {
          return !DEFAULT_MARKER.test(c2);
        });
        pc.push(c);
        return `$0 ${pc.join(" ")}`;
      }
      self.runDefaultBuilderOn = function(yargs2) {
        if (shouldUpdateUsage(yargs2)) {
          const commandString = DEFAULT_MARKER.test(defaultCommand.original) ? defaultCommand.original : defaultCommand.original.replace(/^[^[\]<>]*/, "$0 ");
          yargs2.getUsageInstance().usage(
            commandString,
            defaultCommand.description
          );
        }
        const builder = defaultCommand.builder;
        if (typeof builder === "function") {
          builder(yargs2);
        } else {
          Object.keys(builder).forEach((key) => {
            yargs2.option(key, builder[key]);
          });
        }
      };
      function populatePositionals(commandHandler, argv, context, yargs2) {
        argv._ = argv._.slice(context.commands.length);
        const demanded = commandHandler.demanded.slice(0);
        const optional = commandHandler.optional.slice(0);
        const positionalMap = {};
        validation.positionalCount(demanded.length, argv._.length);
        while (demanded.length) {
          const demand = demanded.shift();
          populatePositional(demand, argv, positionalMap);
        }
        while (optional.length) {
          const maybe = optional.shift();
          populatePositional(maybe, argv, positionalMap);
        }
        argv._ = context.commands.concat(argv._);
        postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original));
        return positionalMap;
      }
      function populatePositional(positional, argv, positionalMap, parseOptions) {
        const cmd = positional.cmd[0];
        if (positional.variadic) {
          positionalMap[cmd] = argv._.splice(0).map(String);
        } else {
          if (argv._.length)
            positionalMap[cmd] = [String(argv._.shift())];
        }
      }
      function postProcessPositionals(argv, positionalMap, parseOptions) {
        const options = Object.assign({}, yargs.getOptions());
        options.default = Object.assign(parseOptions.default, options.default);
        options.alias = Object.assign(parseOptions.alias, options.alias);
        options.array = options.array.concat(parseOptions.array);
        delete options.config;
        const unparsed = [];
        Object.keys(positionalMap).forEach((key) => {
          positionalMap[key].map((value) => {
            unparsed.push(`--${key}`);
            unparsed.push(value);
          });
        });
        if (!unparsed.length)
          return;
        const parsed = Parser.detailed(unparsed, options);
        if (parsed.error) {
          yargs.getUsageInstance().fail(parsed.error.message, parsed.error);
        } else {
          const positionalKeys = Object.keys(positionalMap);
          Object.keys(positionalMap).forEach((key) => {
            [].push.apply(positionalKeys, parsed.aliases[key]);
          });
          Object.keys(parsed.argv).forEach((key) => {
            if (positionalKeys.indexOf(key) !== -1) {
              if (!positionalMap[key])
                positionalMap[key] = parsed.argv[key];
              argv[key] = parsed.argv[key];
            }
          });
        }
      }
      self.cmdToParseOptions = function(cmdString) {
        const parseOptions = {
          array: [],
          default: {},
          alias: {},
          demand: {}
        };
        const parsed = self.parseCommand(cmdString);
        parsed.demanded.forEach((d) => {
          const cmds = d.cmd.slice(0);
          const cmd = cmds.shift();
          if (d.variadic) {
            parseOptions.array.push(cmd);
            parseOptions.default[cmd] = [];
          }
          cmds.forEach((c) => {
            parseOptions.alias[cmd] = c;
          });
          parseOptions.demand[cmd] = true;
        });
        parsed.optional.forEach((o) => {
          const cmds = o.cmd.slice(0);
          const cmd = cmds.shift();
          if (o.variadic) {
            parseOptions.array.push(cmd);
            parseOptions.default[cmd] = [];
          }
          cmds.forEach((c) => {
            parseOptions.alias[cmd] = c;
          });
        });
        return parseOptions;
      };
      self.reset = () => {
        handlers = {};
        aliasMap = {};
        defaultCommand = void 0;
        return self;
      };
      let frozen;
      self.freeze = () => {
        frozen = {};
        frozen.handlers = handlers;
        frozen.aliasMap = aliasMap;
        frozen.defaultCommand = defaultCommand;
      };
      self.unfreeze = () => {
        handlers = frozen.handlers;
        aliasMap = frozen.aliasMap;
        defaultCommand = frozen.defaultCommand;
        frozen = void 0;
      };
      return self;
    };
  }
});

// ../../../node_modules/yargs/lib/yerror.js
var require_yerror = __commonJS({
  "../../../node_modules/yargs/lib/yerror.js"(exports, module) {
    "use strict";
    function YError(msg) {
      this.name = "YError";
      this.message = msg || "yargs error";
      Error.captureStackTrace(this, YError);
    }
    YError.prototype = Object.create(Error.prototype);
    YError.prototype.constructor = YError;
    module.exports = YError;
  }
});

// ../../../node_modules/yargs/lib/argsert.js
var require_argsert = __commonJS({
  "../../../node_modules/yargs/lib/argsert.js"(exports, module) {
    "use strict";
    module.exports = argsert;
    var command = require_command()();
    var YError = require_yerror();
    var positionName = ["first", "second", "third", "fourth", "fifth", "sixth"];
    function argsert(expected, callerArguments, length) {
      try {
        let position = 0;
        let parsed = { demanded: [], optional: [] };
        if (typeof expected === "object") {
          length = callerArguments;
          callerArguments = expected;
        } else {
          parsed = command.parseCommand(`cmd ${expected}`);
        }
        const args = [].slice.call(callerArguments);
        while (args.length && args[args.length - 1] === void 0)
          args.pop();
        length = length || args.length;
        if (length < parsed.demanded.length) {
          throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`);
        }
        const totalCommands = parsed.demanded.length + parsed.optional.length;
        if (length > totalCommands) {
          throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`);
        }
        parsed.demanded.forEach((demanded) => {
          const arg = args.shift();
          const observedType = guessType(arg);
          const matchingTypes = demanded.cmd.filter((type) => type === observedType || type === "*");
          if (matchingTypes.length === 0)
            argumentTypeError(observedType, demanded.cmd, position, false);
          position += 1;
        });
        parsed.optional.forEach((optional) => {
          if (args.length === 0)
            return;
          const arg = args.shift();
          const observedType = guessType(arg);
          const matchingTypes = optional.cmd.filter((type) => type === observedType || type === "*");
          if (matchingTypes.length === 0)
            argumentTypeError(observedType, optional.cmd, position, true);
          position += 1;
        });
      } catch (err) {
        console.warn(err.stack);
      }
    }
    function guessType(arg) {
      if (Array.isArray(arg)) {
        return "array";
      } else if (arg === null) {
        return "null";
      }
      return typeof arg;
    }
    function argumentTypeError(observedType, allowedTypes, position, optional) {
      throw new YError(`Invalid ${positionName[position] || "manyith"} argument. Expected ${allowedTypes.join(" or ")} but received ${observedType}.`);
    }
  }
});

// ../../../node_modules/yargs/lib/completion-templates.js
var require_completion_templates = __commonJS({
  "../../../node_modules/yargs/lib/completion-templates.js"(exports) {
    exports.completionShTemplate = `###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc
#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.
#
_yargs_completions()
{
    local cur_word args type_list

    cur_word="\${COMP_WORDS[COMP_CWORD]}"
    args=("\${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$({{app_path}} --get-yargs-completions "\${args[@]}")

    COMPREPLY=( $(compgen -W "\${type_list}" -- \${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ \${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o default -F _yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`;
    exports.completionZshTemplate = `###-begin-{{app_name}}-completions-###
#
# yargs command completion script
#
# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc
#    or {{app_path}} {{completion_command}} >> ~/.zsh_profile on OSX.
#
_{{app_name}}_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "\${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _{{app_name}}_yargs_completions {{app_name}}
###-end-{{app_name}}-completions-###
`;
  }
});

// ../../../node_modules/yargs/lib/completion.js
var require_completion = __commonJS({
  "../../../node_modules/yargs/lib/completion.js"(exports, module) {
    "use strict";
    var path = require_path();
    module.exports = function completion(yargs, usage, command) {
      const self = {
        completionKey: "get-yargs-completions"
      };
      const zshShell = process.env.SHELL && process.env.SHELL.indexOf("zsh") !== -1;
      self.getCompletion = function getCompletion(args, done) {
        const completions = [];
        const current = args.length ? args[args.length - 1] : "";
        const argv = yargs.parse(args, true);
        const aliases = yargs.parsed.aliases;
        const parentCommands = yargs.getContext().commands;
        if (completionFunction) {
          if (completionFunction.length < 3) {
            const result = completionFunction(current, argv);
            if (typeof result.then === "function") {
              return result.then((list) => {
                process.nextTick(() => {
                  done(list);
                });
              }).catch((err) => {
                process.nextTick(() => {
                  throw err;
                });
              });
            }
            return done(result);
          } else {
            return completionFunction(current, argv, (completions2) => {
              done(completions2);
            });
          }
        }
        const handlers = command.getCommandHandlers();
        for (let i = 0, ii = args.length; i < ii; ++i) {
          if (handlers[args[i]] && handlers[args[i]].builder) {
            const builder = handlers[args[i]].builder;
            if (typeof builder === "function") {
              const y = yargs.reset();
              builder(y);
              return y.argv;
            }
          }
        }
        if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {
          usage.getCommands().forEach((usageCommand) => {
            const commandName = command.parseCommand(usageCommand[0]).cmd;
            if (args.indexOf(commandName) === -1) {
              if (!zshShell) {
                completions.push(commandName);
              } else {
                const desc = usageCommand[1] || "";
                completions.push(commandName.replace(/:/g, "\\:") + ":" + desc);
              }
            }
          });
        }
        if (current.match(/^-/) || current === "" && completions.length === 0) {
          const descs = usage.getDescriptions();
          Object.keys(yargs.getOptions().key).forEach((key) => {
            const keyAndAliases = [key].concat(aliases[key] || []);
            const notInArgs = keyAndAliases.every((val) => args.indexOf(`--${val}`) === -1);
            if (notInArgs) {
              if (!zshShell) {
                completions.push(`--${key}`);
              } else {
                const desc = descs[key] || "";
                completions.push(`--${key.replace(/:/g, "\\:")}:${desc.replace("__yargsString__:", "")}`);
              }
            }
          });
        }
        done(completions);
      };
      self.generateCompletionScript = function generateCompletionScript($0, cmd) {
        const templates = require_completion_templates();
        let script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;
        const name = path.basename($0);
        if ($0.match(/\.js$/))
          $0 = `./${$0}`;
        script = script.replace(/{{app_name}}/g, name);
        script = script.replace(/{{completion_command}}/g, cmd);
        return script.replace(/{{app_path}}/g, $0);
      };
      let completionFunction = null;
      self.registerFunction = (fn) => {
        completionFunction = fn;
      };
      return self;
    };
  }
});

// ../../../node_modules/yargs/lib/decamelize.js
var require_decamelize2 = __commonJS({
  "../../../node_modules/yargs/lib/decamelize.js"(exports, module) {
    "use strict";
    module.exports = (text, separator) => {
      separator = typeof separator === "undefined" ? "_" : separator;
      return text.replace(/([a-z\d])([A-Z])/g, `$1${separator}$2`).replace(/([A-Z]+)([A-Z][a-z\d]+)/g, `$1${separator}$2`).toLowerCase();
    };
  }
});

// ../../../node_modules/yargs/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS({
  "../../../node_modules/yargs/node_modules/ansi-regex/index.js"(exports, module) {
    "use strict";
    module.exports = (options) => {
      options = Object.assign({
        onlyFirst: false
      }, options);
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
    };
  }
});

// ../../../node_modules/yargs/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS({
  "../../../node_modules/yargs/node_modules/strip-ansi/index.js"(exports, module) {
    "use strict";
    var ansiRegex = require_ansi_regex();
    var stripAnsi = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
    module.exports = stripAnsi;
    module.exports.default = stripAnsi;
  }
});

// ../../../node_modules/yargs/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS({
  "../../../node_modules/yargs/node_modules/is-fullwidth-code-point/index.js"(exports, module) {
    "use strict";
    module.exports = (x) => {
      if (Number.isNaN(x)) {
        return false;
      }
      if (x >= 4352 && (x <= 4447 || // Hangul Jamo
      x === 9001 || // LEFT-POINTING ANGLE BRACKET
      x === 9002 || // RIGHT-POINTING ANGLE BRACKET
      // CJK Radicals Supplement .. Enclosed CJK Letters and Months
      11904 <= x && x <= 12871 && x !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
      12880 <= x && x <= 19903 || // CJK Unified Ideographs .. Yi Radicals
      19968 <= x && x <= 42182 || // Hangul Jamo Extended-A
      43360 <= x && x <= 43388 || // Hangul Syllables
      44032 <= x && x <= 55203 || // CJK Compatibility Ideographs
      63744 <= x && x <= 64255 || // Vertical Forms
      65040 <= x && x <= 65049 || // CJK Compatibility Forms .. Small Form Variants
      65072 <= x && x <= 65131 || // Halfwidth and Fullwidth Forms
      65281 <= x && x <= 65376 || 65504 <= x && x <= 65510 || // Kana Supplement
      110592 <= x && x <= 110593 || // Enclosed Ideographic Supplement
      127488 <= x && x <= 127569 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
      131072 <= x && x <= 262141)) {
        return true;
      }
      return false;
    };
  }
});

// ../../../node_modules/yargs/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "../../../node_modules/yargs/node_modules/emoji-regex/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return /\uD83C\uDFF4(?:\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\u200D\u2620\uFE0F)|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDD1-\uDDDD])/g;
    };
  }
});

// ../../../node_modules/yargs/node_modules/string-width/index.js
var require_string_width = __commonJS({
  "../../../node_modules/yargs/node_modules/string-width/index.js"(exports, module) {
    "use strict";
    var stripAnsi = require_strip_ansi();
    var isFullwidthCodePoint = require_is_fullwidth_code_point();
    var emojiRegex = require_emoji_regex()();
    module.exports = (input) => {
      input = input.replace(emojiRegex, "  ");
      if (typeof input !== "string" || input.length === 0) {
        return 0;
      }
      input = stripAnsi(input);
      let width = 0;
      for (let i = 0; i < input.length; i++) {
        const code = input.codePointAt(i);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
  }
});

// ../../../node_modules/yargs/lib/obj-filter.js
var require_obj_filter = __commonJS({
  "../../../node_modules/yargs/lib/obj-filter.js"(exports, module) {
    "use strict";
    module.exports = function objFilter(original, filter) {
      const obj = {};
      filter = filter || ((k, v) => true);
      Object.keys(original || {}).forEach((key) => {
        if (filter(key, original[key])) {
          obj[key] = original[key];
        }
      });
      return obj;
    };
  }
});

// ../../../node_modules/set-blocking/index.js
var require_set_blocking = __commonJS({
  "../../../node_modules/set-blocking/index.js"(exports, module) {
    module.exports = function(blocking) {
      [process.stdout, process.stderr].forEach(function(stream) {
        if (stream._handle && stream.isTTY && typeof stream._handle.setBlocking === "function") {
          stream._handle.setBlocking(blocking);
        }
      });
    };
  }
});

// ../../../node_modules/cliui/node_modules/ansi-regex/index.js
var require_ansi_regex2 = __commonJS({
  "../../../node_modules/cliui/node_modules/ansi-regex/index.js"(exports, module) {
    "use strict";
    module.exports = (options) => {
      options = Object.assign({
        onlyFirst: false
      }, options);
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
    };
  }
});

// ../../../node_modules/cliui/node_modules/strip-ansi/index.js
var require_strip_ansi2 = __commonJS({
  "../../../node_modules/cliui/node_modules/strip-ansi/index.js"(exports, module) {
    "use strict";
    var ansiRegex = require_ansi_regex2();
    var stripAnsi = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
    module.exports = stripAnsi;
    module.exports.default = stripAnsi;
  }
});

// ../../../node_modules/cliui/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point2 = __commonJS({
  "../../../node_modules/cliui/node_modules/is-fullwidth-code-point/index.js"(exports, module) {
    "use strict";
    module.exports = (x) => {
      if (Number.isNaN(x)) {
        return false;
      }
      if (x >= 4352 && (x <= 4447 || // Hangul Jamo
      x === 9001 || // LEFT-POINTING ANGLE BRACKET
      x === 9002 || // RIGHT-POINTING ANGLE BRACKET
      // CJK Radicals Supplement .. Enclosed CJK Letters and Months
      11904 <= x && x <= 12871 && x !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
      12880 <= x && x <= 19903 || // CJK Unified Ideographs .. Yi Radicals
      19968 <= x && x <= 42182 || // Hangul Jamo Extended-A
      43360 <= x && x <= 43388 || // Hangul Syllables
      44032 <= x && x <= 55203 || // CJK Compatibility Ideographs
      63744 <= x && x <= 64255 || // Vertical Forms
      65040 <= x && x <= 65049 || // CJK Compatibility Forms .. Small Form Variants
      65072 <= x && x <= 65131 || // Halfwidth and Fullwidth Forms
      65281 <= x && x <= 65376 || 65504 <= x && x <= 65510 || // Kana Supplement
      110592 <= x && x <= 110593 || // Enclosed Ideographic Supplement
      127488 <= x && x <= 127569 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
      131072 <= x && x <= 262141)) {
        return true;
      }
      return false;
    };
  }
});

// ../../../node_modules/cliui/node_modules/emoji-regex/index.js
var require_emoji_regex2 = __commonJS({
  "../../../node_modules/cliui/node_modules/emoji-regex/index.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return /\uD83C\uDFF4(?:\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74)\uDB40\uDC7F|\u200D\u2620\uFE0F)|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3]))|\uD83D\uDC69\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83D\uDC69\u200D[\u2695\u2696\u2708])\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC68(?:\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDB0-\uDDB3])|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF9]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD70\uDD73-\uDD76\uDD7A\uDD7C-\uDDA2\uDDB0-\uDDB9\uDDC0-\uDDC2\uDDD0-\uDDFF])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDD1-\uDDDD])/g;
    };
  }
});

// ../../../node_modules/cliui/node_modules/string-width/index.js
var require_string_width2 = __commonJS({
  "../../../node_modules/cliui/node_modules/string-width/index.js"(exports, module) {
    "use strict";
    var stripAnsi = require_strip_ansi2();
    var isFullwidthCodePoint = require_is_fullwidth_code_point2();
    var emojiRegex = require_emoji_regex2()();
    module.exports = (input) => {
      input = input.replace(emojiRegex, "  ");
      if (typeof input !== "string" || input.length === 0) {
        return 0;
      }
      input = stripAnsi(input);
      let width = 0;
      for (let i = 0; i < input.length; i++) {
        const code = input.codePointAt(i);
        if (code <= 31 || code >= 127 && code <= 159) {
          continue;
        }
        if (code >= 768 && code <= 879) {
          continue;
        }
        if (code > 65535) {
          i++;
        }
        width += isFullwidthCodePoint(code) ? 2 : 1;
      }
      return width;
    };
  }
});

// ../../../node_modules/cliui/node_modules/color-name/index.js
var require_color_name = __commonJS({
  "../../../node_modules/cliui/node_modules/color-name/index.js"(exports, module) {
    "use strict";
    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// ../../../node_modules/cliui/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "../../../node_modules/cliui/node_modules/color-convert/conversions.js"(exports, module) {
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }
    var key;
    var convert = module.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// ../../../node_modules/cliui/node_modules/color-convert/route.js
var require_route = __commonJS({
  "../../../node_modules/cliui/node_modules/color-convert/route.js"(exports, module) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path;
      return fn;
    }
    module.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// ../../../node_modules/cliui/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "../../../node_modules/cliui/node_modules/color-convert/index.js"(exports, module) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
  }
});

// ../../../node_modules/cliui/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "../../../node_modules/cliui/node_modules/ansi-styles/index.js"(exports, module) {
    "use strict";
    var colorConvert = require_color_convert();
    var wrapAnsi16 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return `\x1B[${code + offset}m`;
    };
    var wrapAnsi256 = (fn, offset) => function() {
      const code = fn.apply(colorConvert, arguments);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn, offset) => function() {
      const rgb = fn.apply(colorConvert, arguments);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          // 21 isn't widely supported and 22 does the same thing
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          gray: [90, 39],
          // Bright color
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          // Bright color
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.grey = styles.color.gray;
      for (const groupName of Object.keys(styles)) {
        const group = styles[groupName];
        for (const styleName of Object.keys(group)) {
          const style = group[styleName];
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
      }
      const ansi2ansi = (n) => n;
      const rgb2rgb = (r, g, b) => [r, g, b];
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
      };
      styles.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
      };
      styles.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
      };
      styles.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
      };
      styles.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
      };
      styles.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
      };
      for (let key of Object.keys(colorConvert)) {
        if (typeof colorConvert[key] !== "object") {
          continue;
        }
        const suite = colorConvert[key];
        if (key === "ansi16") {
          key = "ansi";
        }
        if ("ansi16" in suite) {
          styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
          styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
        }
        if ("ansi256" in suite) {
          styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
          styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
        }
        if ("rgb" in suite) {
          styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
          styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
        }
      }
      return styles;
    }
    Object.defineProperty(module, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// ../../../node_modules/cliui/node_modules/wrap-ansi/index.js
var require_wrap_ansi = __commonJS({
  "../../../node_modules/cliui/node_modules/wrap-ansi/index.js"(exports, module) {
    "use strict";
    var stringWidth = require_string_width2();
    var stripAnsi = require_strip_ansi2();
    var ansiStyles = require_ansi_styles();
    var ESCAPES = /* @__PURE__ */ new Set([
      "\x1B",
      ""
    ]);
    var END_CODE = 39;
    var wrapAnsi = (code) => `${ESCAPES.values().next().value}[${code}m`;
    var wordLengths = (string) => string.split(" ").map((character) => stringWidth(character));
    var wrapWord = (rows, word, columns) => {
      const characters = [...word];
      let insideEscape = false;
      let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
      for (const [index, character] of characters.entries()) {
        const characterLength = stringWidth(character);
        if (visible + characterLength <= columns) {
          rows[rows.length - 1] += character;
        } else {
          rows.push(character);
          visible = 0;
        }
        if (ESCAPES.has(character)) {
          insideEscape = true;
        } else if (insideEscape && character === "m") {
          insideEscape = false;
          continue;
        }
        if (insideEscape) {
          continue;
        }
        visible += characterLength;
        if (visible === columns && index < characters.length - 1) {
          rows.push("");
          visible = 0;
        }
      }
      if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
        rows[rows.length - 2] += rows.pop();
      }
    };
    var stringVisibleTrimSpacesRight = (str) => {
      const words = str.split(" ");
      let last = words.length;
      while (last > 0) {
        if (stringWidth(words[last - 1]) > 0) {
          break;
        }
        last--;
      }
      if (last === words.length) {
        return str;
      }
      return words.slice(0, last).join(" ") + words.slice(last).join("");
    };
    var exec = (string, columns, options = {}) => {
      if (options.trim !== false && string.trim() === "") {
        return "";
      }
      let pre = "";
      let ret = "";
      let escapeCode;
      const lengths = wordLengths(string);
      let rows = [""];
      for (const [index, word] of string.split(" ").entries()) {
        if (options.trim !== false) {
          rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
        }
        let rowLength = stringWidth(rows[rows.length - 1]);
        if (index !== 0) {
          if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
            rows.push("");
            rowLength = 0;
          }
          if (rowLength > 0 || options.trim === false) {
            rows[rows.length - 1] += " ";
            rowLength++;
          }
        }
        if (options.hard && lengths[index] > columns) {
          const remainingColumns = columns - rowLength;
          const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
          const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
          if (breaksStartingNextLine < breaksStartingThisLine) {
            rows.push("");
          }
          wrapWord(rows, word, columns);
          continue;
        }
        if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
          if (options.wordWrap === false && rowLength < columns) {
            wrapWord(rows, word, columns);
            continue;
          }
          rows.push("");
        }
        if (rowLength + lengths[index] > columns && options.wordWrap === false) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows[rows.length - 1] += word;
      }
      if (options.trim !== false) {
        rows = rows.map(stringVisibleTrimSpacesRight);
      }
      pre = rows.join("\n");
      for (const [index, character] of [...pre].entries()) {
        ret += character;
        if (ESCAPES.has(character)) {
          const code2 = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
          escapeCode = code2 === END_CODE ? null : code2;
        }
        const code = ansiStyles.codes.get(Number(escapeCode));
        if (escapeCode && code) {
          if (pre[index + 1] === "\n") {
            ret += wrapAnsi(code);
          } else if (character === "\n") {
            ret += wrapAnsi(escapeCode);
          }
        }
      }
      return ret;
    };
    module.exports = (string, columns, options) => {
      return String(string).normalize().split("\n").map((line) => exec(line, columns, options)).join("\n");
    };
  }
});

// ../../../node_modules/cliui/index.js
var require_cliui = __commonJS({
  "../../../node_modules/cliui/index.js"(exports, module) {
    var stringWidth = require_string_width2();
    var stripAnsi = require_strip_ansi2();
    var wrap = require_wrap_ansi();
    var align = {
      right: alignRight,
      center: alignCenter
    };
    var top = 0;
    var right = 1;
    var bottom = 2;
    var left = 3;
    function UI(opts) {
      this.width = opts.width;
      this.wrap = opts.wrap;
      this.rows = [];
    }
    UI.prototype.span = function() {
      var cols = this.div.apply(this, arguments);
      cols.span = true;
    };
    UI.prototype.resetOutput = function() {
      this.rows = [];
    };
    UI.prototype.div = function() {
      if (arguments.length === 0)
        this.div("");
      if (this.wrap && this._shouldApplyLayoutDSL.apply(this, arguments)) {
        return this._applyLayoutDSL(arguments[0]);
      }
      var cols = [];
      for (var i = 0, arg; (arg = arguments[i]) !== void 0; i++) {
        if (typeof arg === "string")
          cols.push(this._colFromString(arg));
        else
          cols.push(arg);
      }
      this.rows.push(cols);
      return cols;
    };
    UI.prototype._shouldApplyLayoutDSL = function() {
      return arguments.length === 1 && typeof arguments[0] === "string" && /[\t\n]/.test(arguments[0]);
    };
    UI.prototype._applyLayoutDSL = function(str) {
      var _this = this;
      var rows = str.split("\n");
      var leftColumnWidth = 0;
      rows.forEach(function(row) {
        var columns = row.split("	");
        if (columns.length > 1 && stringWidth(columns[0]) > leftColumnWidth) {
          leftColumnWidth = Math.min(
            Math.floor(_this.width * 0.5),
            stringWidth(columns[0])
          );
        }
      });
      rows.forEach(function(row) {
        var columns = row.split("	");
        _this.div.apply(_this, columns.map(function(r, i) {
          return {
            text: r.trim(),
            padding: _this._measurePadding(r),
            width: i === 0 && columns.length > 1 ? leftColumnWidth : void 0
          };
        }));
      });
      return this.rows[this.rows.length - 1];
    };
    UI.prototype._colFromString = function(str) {
      return {
        text: str,
        padding: this._measurePadding(str)
      };
    };
    UI.prototype._measurePadding = function(str) {
      var noAnsi = stripAnsi(str);
      return [0, noAnsi.match(/\s*$/)[0].length, 0, noAnsi.match(/^\s*/)[0].length];
    };
    UI.prototype.toString = function() {
      var _this = this;
      var lines = [];
      _this.rows.forEach(function(row, i) {
        _this.rowToString(row, lines);
      });
      lines = lines.filter(function(line) {
        return !line.hidden;
      });
      return lines.map(function(line) {
        return line.text;
      }).join("\n");
    };
    UI.prototype.rowToString = function(row, lines) {
      var _this = this;
      var padding;
      var rrows = this._rasterize(row);
      var str = "";
      var ts;
      var width;
      var wrapWidth;
      rrows.forEach(function(rrow, r) {
        str = "";
        rrow.forEach(function(col, c) {
          ts = "";
          width = row[c].width;
          wrapWidth = _this._negatePadding(row[c]);
          ts += col;
          for (var i = 0; i < wrapWidth - stringWidth(col); i++) {
            ts += " ";
          }
          if (row[c].align && row[c].align !== "left" && _this.wrap) {
            ts = align[row[c].align](ts, wrapWidth);
            if (stringWidth(ts) < wrapWidth)
              ts += new Array(width - stringWidth(ts)).join(" ");
          }
          padding = row[c].padding || [0, 0, 0, 0];
          if (padding[left])
            str += new Array(padding[left] + 1).join(" ");
          str += addBorder(row[c], ts, "| ");
          str += ts;
          str += addBorder(row[c], ts, " |");
          if (padding[right])
            str += new Array(padding[right] + 1).join(" ");
          if (r === 0 && lines.length > 0) {
            str = _this._renderInline(str, lines[lines.length - 1]);
          }
        });
        lines.push({
          text: str.replace(/ +$/, ""),
          span: row.span
        });
      });
      return lines;
    };
    function addBorder(col, ts, style) {
      if (col.border) {
        if (/[.']-+[.']/.test(ts))
          return "";
        else if (ts.trim().length)
          return style;
        else
          return "  ";
      }
      return "";
    }
    UI.prototype._renderInline = function(source, previousLine) {
      var leadingWhitespace = source.match(/^ */)[0].length;
      var target = previousLine.text;
      var targetTextWidth = stringWidth(target.trimRight());
      if (!previousLine.span)
        return source;
      if (!this.wrap) {
        previousLine.hidden = true;
        return target + source;
      }
      if (leadingWhitespace < targetTextWidth)
        return source;
      previousLine.hidden = true;
      return target.trimRight() + new Array(leadingWhitespace - targetTextWidth + 1).join(" ") + source.trimLeft();
    };
    UI.prototype._rasterize = function(row) {
      var _this = this;
      var i;
      var rrow;
      var rrows = [];
      var widths = this._columnWidths(row);
      var wrapped;
      row.forEach(function(col, c) {
        col.width = widths[c];
        if (_this.wrap)
          wrapped = wrap(col.text, _this._negatePadding(col), { hard: true }).split("\n");
        else
          wrapped = col.text.split("\n");
        if (col.border) {
          wrapped.unshift("." + new Array(_this._negatePadding(col) + 3).join("-") + ".");
          wrapped.push("'" + new Array(_this._negatePadding(col) + 3).join("-") + "'");
        }
        if (col.padding) {
          for (i = 0; i < (col.padding[top] || 0); i++)
            wrapped.unshift("");
          for (i = 0; i < (col.padding[bottom] || 0); i++)
            wrapped.push("");
        }
        wrapped.forEach(function(str, r) {
          if (!rrows[r])
            rrows.push([]);
          rrow = rrows[r];
          for (var i2 = 0; i2 < c; i2++) {
            if (rrow[i2] === void 0)
              rrow.push("");
          }
          rrow.push(str);
        });
      });
      return rrows;
    };
    UI.prototype._negatePadding = function(col) {
      var wrapWidth = col.width;
      if (col.padding)
        wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);
      if (col.border)
        wrapWidth -= 4;
      return wrapWidth;
    };
    UI.prototype._columnWidths = function(row) {
      var _this = this;
      var widths = [];
      var unset = row.length;
      var unsetWidth;
      var remainingWidth = this.width;
      row.forEach(function(col, i) {
        if (col.width) {
          unset--;
          widths[i] = col.width;
          remainingWidth -= col.width;
        } else {
          widths[i] = void 0;
        }
      });
      if (unset)
        unsetWidth = Math.floor(remainingWidth / unset);
      widths.forEach(function(w, i) {
        if (!_this.wrap)
          widths[i] = row[i].width || stringWidth(row[i].text);
        else if (w === void 0)
          widths[i] = Math.max(unsetWidth, _minWidth(row[i]));
      });
      return widths;
    };
    function _minWidth(col) {
      var padding = col.padding || [];
      var minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);
      if (col.border)
        minWidth += 4;
      return minWidth;
    }
    function getWindowWidth() {
      if (typeof process === "object" && process.stdout && process.stdout.columns)
        return process.stdout.columns;
    }
    function alignRight(str, width) {
      str = str.trim();
      var padding = "";
      var strWidth = stringWidth(str);
      if (strWidth < width) {
        padding = new Array(width - strWidth + 1).join(" ");
      }
      return padding + str;
    }
    function alignCenter(str, width) {
      str = str.trim();
      var padding = "";
      var strWidth = stringWidth(str.trim());
      if (strWidth < width) {
        padding = new Array(parseInt((width - strWidth) / 2, 10) + 1).join(" ");
      }
      return padding + str;
    }
    module.exports = function(opts) {
      opts = opts || {};
      return new UI({
        width: (opts || {}).width || getWindowWidth() || 80,
        wrap: typeof opts.wrap === "boolean" ? opts.wrap : true
      });
    };
  }
});

// ../../../node_modules/yargs/lib/usage.js
var require_usage = __commonJS({
  "../../../node_modules/yargs/lib/usage.js"(exports, module) {
    "use strict";
    var decamelize = require_decamelize2();
    var stringWidth = require_string_width();
    var objFilter = require_obj_filter();
    var path = require_path();
    var setBlocking = require_set_blocking();
    var YError = require_yerror();
    module.exports = function usage(yargs, y18n) {
      const __ = y18n.__;
      const self = {};
      const fails = [];
      self.failFn = function failFn(f) {
        fails.push(f);
      };
      let failMessage = null;
      let showHelpOnFail = true;
      self.showHelpOnFail = function showHelpOnFailFn(enabled, message) {
        if (typeof enabled === "string") {
          message = enabled;
          enabled = true;
        } else if (typeof enabled === "undefined") {
          enabled = true;
        }
        failMessage = message;
        showHelpOnFail = enabled;
        return self;
      };
      let failureOutput = false;
      self.fail = function fail(msg, err) {
        const logger = yargs._getLoggerInstance();
        if (fails.length) {
          for (let i = fails.length - 1; i >= 0; --i) {
            fails[i](msg, err, self);
          }
        } else {
          if (yargs.getExitProcess())
            setBlocking(true);
          if (!failureOutput) {
            failureOutput = true;
            if (showHelpOnFail) {
              yargs.showHelp("error");
              logger.error();
            }
            if (msg || err)
              logger.error(msg || err);
            if (failMessage) {
              if (msg || err)
                logger.error("");
              logger.error(failMessage);
            }
          }
          err = err || new YError(msg);
          if (yargs.getExitProcess()) {
            return yargs.exit(1);
          } else if (yargs._hasParseCallback()) {
            return yargs.exit(1, err);
          } else {
            throw err;
          }
        }
      };
      let usages = [];
      let usageDisabled = false;
      self.usage = (msg, description) => {
        if (msg === null) {
          usageDisabled = true;
          usages = [];
          return;
        }
        usageDisabled = false;
        usages.push([msg, description || ""]);
        return self;
      };
      self.getUsage = () => {
        return usages;
      };
      self.getUsageDisabled = () => {
        return usageDisabled;
      };
      self.getPositionalGroupName = () => {
        return __("Positionals:");
      };
      let examples = [];
      self.example = (cmd, description) => {
        examples.push([cmd, description || ""]);
      };
      let commands = [];
      self.command = function command(cmd, description, isDefault, aliases) {
        if (isDefault) {
          commands = commands.map((cmdArray) => {
            cmdArray[2] = false;
            return cmdArray;
          });
        }
        commands.push([cmd, description || "", isDefault, aliases]);
      };
      self.getCommands = () => commands;
      let descriptions = {};
      self.describe = function describe(key, desc) {
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self.describe(k, key[k]);
          });
        } else {
          descriptions[key] = desc;
        }
      };
      self.getDescriptions = () => descriptions;
      let epilog;
      self.epilog = (msg) => {
        epilog = msg;
      };
      let wrapSet = false;
      let wrap;
      self.wrap = (cols) => {
        wrapSet = true;
        wrap = cols;
      };
      function getWrap() {
        if (!wrapSet) {
          wrap = windowWidth();
          wrapSet = true;
        }
        return wrap;
      }
      const deferY18nLookupPrefix = "__yargsString__:";
      self.deferY18nLookup = (str) => deferY18nLookupPrefix + str;
      const defaultGroup = "Options:";
      self.help = function help() {
        normalizeAliases();
        const base$0 = path.basename(yargs.$0);
        const demandedOptions = yargs.getDemandedOptions();
        const demandedCommands = yargs.getDemandedCommands();
        const groups = yargs.getGroups();
        const options = yargs.getOptions();
        let keys = [];
        keys = keys.concat(Object.keys(descriptions));
        keys = keys.concat(Object.keys(demandedOptions));
        keys = keys.concat(Object.keys(demandedCommands));
        keys = keys.concat(Object.keys(options.default));
        keys = keys.filter(filterHiddenOptions);
        keys = Object.keys(keys.reduce((acc, key) => {
          if (key !== "_")
            acc[key] = true;
          return acc;
        }, {}));
        const theWrap = getWrap();
        const ui = require_cliui()({
          width: theWrap,
          wrap: !!theWrap
        });
        if (!usageDisabled) {
          if (usages.length) {
            usages.forEach((usage2) => {
              ui.div(`${usage2[0].replace(/\$0/g, base$0)}`);
              if (usage2[1]) {
                ui.div({ text: `${usage2[1]}`, padding: [1, 0, 0, 0] });
              }
            });
            ui.div();
          } else if (commands.length) {
            let u = null;
            if (demandedCommands._) {
              u = `${base$0} <${__("command")}>
`;
            } else {
              u = `${base$0} [${__("command")}]
`;
            }
            ui.div(`${u}`);
          }
        }
        if (commands.length) {
          ui.div(__("Commands:"));
          const context = yargs.getContext();
          const parentCommands = context.commands.length ? `${context.commands.join(" ")} ` : "";
          if (yargs.getParserConfiguration()["sort-commands"] === true) {
            commands = commands.sort((a, b) => a[0].localeCompare(b[0]));
          }
          commands.forEach((command) => {
            const commandString = `${base$0} ${parentCommands}${command[0].replace(/^\$0 ?/, "")}`;
            ui.span(
              {
                text: commandString,
                padding: [0, 2, 0, 2],
                width: maxWidth(commands, theWrap, `${base$0}${parentCommands}`) + 4
              },
              { text: command[1] }
            );
            const hints = [];
            if (command[2])
              hints.push(`[${__("default:").slice(0, -1)}]`);
            if (command[3] && command[3].length) {
              hints.push(`[${__("aliases:")} ${command[3].join(", ")}]`);
            }
            if (hints.length) {
              ui.div({ text: hints.join(" "), padding: [0, 0, 0, 2], align: "right" });
            } else {
              ui.div();
            }
          });
          ui.div();
        }
        const aliasKeys = (Object.keys(options.alias) || []).concat(Object.keys(yargs.parsed.newAliases) || []);
        keys = keys.filter((key) => !yargs.parsed.newAliases[key] && aliasKeys.every((alias) => (options.alias[alias] || []).indexOf(key) === -1));
        if (!groups[defaultGroup])
          groups[defaultGroup] = [];
        addUngroupedKeys(keys, options.alias, groups);
        Object.keys(groups).forEach((groupName) => {
          if (!groups[groupName].length)
            return;
          const normalizedKeys = groups[groupName].filter(filterHiddenOptions).map((key) => {
            if (~aliasKeys.indexOf(key))
              return key;
            for (let i = 0, aliasKey; (aliasKey = aliasKeys[i]) !== void 0; i++) {
              if (~(options.alias[aliasKey] || []).indexOf(key))
                return aliasKey;
            }
            return key;
          });
          if (normalizedKeys.length < 1)
            return;
          ui.div(__(groupName));
          const switches = normalizedKeys.reduce((acc, key) => {
            acc[key] = [key].concat(options.alias[key] || []).map((sw) => {
              if (groupName === self.getPositionalGroupName())
                return sw;
              else
                return (sw.length > 1 ? "--" : "-") + sw;
            }).join(", ");
            return acc;
          }, {});
          normalizedKeys.forEach((key) => {
            const kswitch = switches[key];
            let desc = descriptions[key] || "";
            let type = null;
            if (~desc.lastIndexOf(deferY18nLookupPrefix))
              desc = __(desc.substring(deferY18nLookupPrefix.length));
            if (~options.boolean.indexOf(key))
              type = `[${__("boolean")}]`;
            if (~options.count.indexOf(key))
              type = `[${__("count")}]`;
            if (~options.string.indexOf(key))
              type = `[${__("string")}]`;
            if (~options.normalize.indexOf(key))
              type = `[${__("string")}]`;
            if (~options.array.indexOf(key))
              type = `[${__("array")}]`;
            if (~options.number.indexOf(key))
              type = `[${__("number")}]`;
            const extra = [
              type,
              key in demandedOptions ? `[${__("required")}]` : null,
              options.choices && options.choices[key] ? `[${__("choices:")} ${self.stringifiedValues(options.choices[key])}]` : null,
              defaultString(options.default[key], options.defaultDescription[key])
            ].filter(Boolean).join(" ");
            ui.span(
              { text: kswitch, padding: [0, 2, 0, 2], width: maxWidth(switches, theWrap) + 4 },
              desc
            );
            if (extra)
              ui.div({ text: extra, padding: [0, 0, 0, 2], align: "right" });
            else
              ui.div();
          });
          ui.div();
        });
        if (examples.length) {
          ui.div(__("Examples:"));
          examples.forEach((example) => {
            example[0] = example[0].replace(/\$0/g, base$0);
          });
          examples.forEach((example) => {
            if (example[1] === "") {
              ui.div(
                {
                  text: example[0],
                  padding: [0, 2, 0, 2]
                }
              );
            } else {
              ui.div(
                {
                  text: example[0],
                  padding: [0, 2, 0, 2],
                  width: maxWidth(examples, theWrap) + 4
                },
                {
                  text: example[1]
                }
              );
            }
          });
          ui.div();
        }
        if (epilog) {
          const e = epilog.replace(/\$0/g, base$0);
          ui.div(`${e}
`);
        }
        return ui.toString().replace(/\s*$/, "");
      };
      function maxWidth(table, theWrap, modifier) {
        let width = 0;
        if (!Array.isArray(table)) {
          table = Object.keys(table).map((key) => [table[key]]);
        }
        table.forEach((v) => {
          width = Math.max(
            stringWidth(modifier ? `${modifier} ${v[0]}` : v[0]),
            width
          );
        });
        if (theWrap)
          width = Math.min(width, parseInt(theWrap * 0.5, 10));
        return width;
      }
      function normalizeAliases() {
        const demandedOptions = yargs.getDemandedOptions();
        const options = yargs.getOptions();
        (Object.keys(options.alias) || []).forEach((key) => {
          options.alias[key].forEach((alias) => {
            if (descriptions[alias])
              self.describe(key, descriptions[alias]);
            if (alias in demandedOptions)
              yargs.demandOption(key, demandedOptions[alias]);
            if (~options.boolean.indexOf(alias))
              yargs.boolean(key);
            if (~options.count.indexOf(alias))
              yargs.count(key);
            if (~options.string.indexOf(alias))
              yargs.string(key);
            if (~options.normalize.indexOf(alias))
              yargs.normalize(key);
            if (~options.array.indexOf(alias))
              yargs.array(key);
            if (~options.number.indexOf(alias))
              yargs.number(key);
          });
        });
      }
      function addUngroupedKeys(keys, aliases, groups) {
        let groupedKeys = [];
        let toCheck = null;
        Object.keys(groups).forEach((group) => {
          groupedKeys = groupedKeys.concat(groups[group]);
        });
        keys.forEach((key) => {
          toCheck = [key].concat(aliases[key]);
          if (!toCheck.some((k) => groupedKeys.indexOf(k) !== -1)) {
            groups[defaultGroup].push(key);
          }
        });
        return groupedKeys;
      }
      function filterHiddenOptions(key) {
        return yargs.getOptions().hiddenOptions.indexOf(key) < 0 || yargs.parsed.argv[yargs.getOptions().showHiddenOpt];
      }
      self.showHelp = (level) => {
        const logger = yargs._getLoggerInstance();
        if (!level)
          level = "error";
        const emit = typeof level === "function" ? level : logger[level];
        emit(self.help());
      };
      self.functionDescription = (fn) => {
        const description = fn.name ? decamelize(fn.name, "-") : __("generated-value");
        return ["(", description, ")"].join("");
      };
      self.stringifiedValues = function stringifiedValues(values, separator) {
        let string = "";
        const sep = separator || ", ";
        const array = [].concat(values);
        if (!values || !array.length)
          return string;
        array.forEach((value) => {
          if (string.length)
            string += sep;
          string += JSON.stringify(value);
        });
        return string;
      };
      function defaultString(value, defaultDescription) {
        let string = `[${__("default:")} `;
        if (value === void 0 && !defaultDescription)
          return null;
        if (defaultDescription) {
          string += defaultDescription;
        } else {
          switch (typeof value) {
            case "string":
              string += `"${value}"`;
              break;
            case "object":
              string += JSON.stringify(value);
              break;
            default:
              string += value;
          }
        }
        return `${string}]`;
      }
      function windowWidth() {
        const maxWidth2 = 80;
        if (typeof process === "object" && process.stdout && process.stdout.columns) {
          return Math.min(maxWidth2, process.stdout.columns);
        } else {
          return maxWidth2;
        }
      }
      let version = null;
      self.version = (ver) => {
        version = ver;
      };
      self.showVersion = () => {
        const logger = yargs._getLoggerInstance();
        logger.log(version);
      };
      self.reset = function reset(localLookup) {
        failMessage = null;
        failureOutput = false;
        usages = [];
        usageDisabled = false;
        epilog = void 0;
        examples = [];
        commands = [];
        descriptions = objFilter(descriptions, (k, v) => !localLookup[k]);
        return self;
      };
      let frozen;
      self.freeze = function freeze() {
        frozen = {};
        frozen.failMessage = failMessage;
        frozen.failureOutput = failureOutput;
        frozen.usages = usages;
        frozen.usageDisabled = usageDisabled;
        frozen.epilog = epilog;
        frozen.examples = examples;
        frozen.commands = commands;
        frozen.descriptions = descriptions;
      };
      self.unfreeze = function unfreeze() {
        failMessage = frozen.failMessage;
        failureOutput = frozen.failureOutput;
        usages = frozen.usages;
        usageDisabled = frozen.usageDisabled;
        epilog = frozen.epilog;
        examples = frozen.examples;
        commands = frozen.commands;
        descriptions = frozen.descriptions;
        frozen = void 0;
      };
      return self;
    };
  }
});

// ../../../node_modules/yargs/lib/levenshtein.js
var require_levenshtein = __commonJS({
  "../../../node_modules/yargs/lib/levenshtein.js"(exports, module) {
    "use strict";
    module.exports = function levenshtein(a, b) {
      if (a.length === 0)
        return b.length;
      if (b.length === 0)
        return a.length;
      const matrix = [];
      let i;
      for (i = 0; i <= b.length; i++) {
        matrix[i] = [i];
      }
      let j;
      for (j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
      }
      for (i = 1; i <= b.length; i++) {
        for (j = 1; j <= a.length; j++) {
          if (b.charAt(i - 1) === a.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(
              matrix[i - 1][j - 1] + 1,
              // substitution
              Math.min(
                matrix[i][j - 1] + 1,
                // insertion
                matrix[i - 1][j] + 1
              )
            );
          }
        }
      }
      return matrix[b.length][a.length];
    };
  }
});

// ../../../node_modules/yargs/lib/validation.js
var require_validation = __commonJS({
  "../../../node_modules/yargs/lib/validation.js"(exports, module) {
    "use strict";
    var argsert = require_argsert();
    var objFilter = require_obj_filter();
    var specialKeys = ["$0", "--", "_"];
    module.exports = function validation(yargs, usage, y18n) {
      const __ = y18n.__;
      const __n = y18n.__n;
      const self = {};
      self.nonOptionCount = function nonOptionCount(argv) {
        const demandedCommands = yargs.getDemandedCommands();
        const _s = argv._.length - yargs.getContext().commands.length;
        if (demandedCommands._ && (_s < demandedCommands._.min || _s > demandedCommands._.max)) {
          if (_s < demandedCommands._.min) {
            if (demandedCommands._.minMsg !== void 0) {
              usage.fail(
                // replace $0 with observed, $1 with expected.
                demandedCommands._.minMsg ? demandedCommands._.minMsg.replace(/\$0/g, _s).replace(/\$1/, demandedCommands._.min) : null
              );
            } else {
              usage.fail(
                __("Not enough non-option arguments: got %s, need at least %s", _s, demandedCommands._.min)
              );
            }
          } else if (_s > demandedCommands._.max) {
            if (demandedCommands._.maxMsg !== void 0) {
              usage.fail(
                // replace $0 with observed, $1 with expected.
                demandedCommands._.maxMsg ? demandedCommands._.maxMsg.replace(/\$0/g, _s).replace(/\$1/, demandedCommands._.max) : null
              );
            } else {
              usage.fail(
                __("Too many non-option arguments: got %s, maximum of %s", _s, demandedCommands._.max)
              );
            }
          }
        }
      };
      self.positionalCount = function positionalCount(required, observed) {
        if (observed < required) {
          usage.fail(
            __("Not enough non-option arguments: got %s, need at least %s", observed, required)
          );
        }
      };
      self.requiredArguments = function requiredArguments(argv) {
        const demandedOptions = yargs.getDemandedOptions();
        let missing = null;
        Object.keys(demandedOptions).forEach((key) => {
          if (!argv.hasOwnProperty(key) || typeof argv[key] === "undefined") {
            missing = missing || {};
            missing[key] = demandedOptions[key];
          }
        });
        if (missing) {
          const customMsgs = [];
          Object.keys(missing).forEach((key) => {
            const msg = missing[key];
            if (msg && customMsgs.indexOf(msg) < 0) {
              customMsgs.push(msg);
            }
          });
          const customMsg = customMsgs.length ? `
${customMsgs.join("\n")}` : "";
          usage.fail(__n(
            "Missing required argument: %s",
            "Missing required arguments: %s",
            Object.keys(missing).length,
            Object.keys(missing).join(", ") + customMsg
          ));
        }
      };
      self.unknownArguments = function unknownArguments(argv, aliases, positionalMap) {
        const commandKeys = yargs.getCommandInstance().getCommands();
        const unknown = [];
        const currentContext = yargs.getContext();
        Object.keys(argv).forEach((key) => {
          if (specialKeys.indexOf(key) === -1 && !positionalMap.hasOwnProperty(key) && !yargs._getParseContext().hasOwnProperty(key) && !aliases.hasOwnProperty(key)) {
            unknown.push(key);
          }
        });
        if (commandKeys.length > 0) {
          argv._.slice(currentContext.commands.length).forEach((key) => {
            if (commandKeys.indexOf(key) === -1) {
              unknown.push(key);
            }
          });
        }
        if (unknown.length > 0) {
          usage.fail(__n(
            "Unknown argument: %s",
            "Unknown arguments: %s",
            unknown.length,
            unknown.join(", ")
          ));
        }
      };
      self.limitedChoices = function limitedChoices(argv) {
        const options = yargs.getOptions();
        const invalid = {};
        if (!Object.keys(options.choices).length)
          return;
        Object.keys(argv).forEach((key) => {
          if (specialKeys.indexOf(key) === -1 && options.choices.hasOwnProperty(key)) {
            [].concat(argv[key]).forEach((value) => {
              if (options.choices[key].indexOf(value) === -1 && value !== void 0) {
                invalid[key] = (invalid[key] || []).concat(value);
              }
            });
          }
        });
        const invalidKeys = Object.keys(invalid);
        if (!invalidKeys.length)
          return;
        let msg = __("Invalid values:");
        invalidKeys.forEach((key) => {
          msg += `
  ${__(
            "Argument: %s, Given: %s, Choices: %s",
            key,
            usage.stringifiedValues(invalid[key]),
            usage.stringifiedValues(options.choices[key])
          )}`;
        });
        usage.fail(msg);
      };
      let checks = [];
      self.check = function check(f, global) {
        checks.push({
          func: f,
          global
        });
      };
      self.customChecks = function customChecks(argv, aliases) {
        for (let i = 0, f; (f = checks[i]) !== void 0; i++) {
          const func = f.func;
          let result = null;
          try {
            result = func(argv, aliases);
          } catch (err) {
            usage.fail(err.message ? err.message : err, err);
            continue;
          }
          if (!result) {
            usage.fail(__("Argument check failed: %s", func.toString()));
          } else if (typeof result === "string" || result instanceof Error) {
            usage.fail(result.toString(), result);
          }
        }
      };
      let implied = {};
      self.implies = function implies(key, value) {
        argsert("<string|object> [array|number|string]", [key, value], arguments.length);
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self.implies(k, key[k]);
          });
        } else {
          yargs.global(key);
          if (!implied[key]) {
            implied[key] = [];
          }
          if (Array.isArray(value)) {
            value.forEach((i) => self.implies(key, i));
          } else {
            implied[key].push(value);
          }
        }
      };
      self.getImplied = function getImplied() {
        return implied;
      };
      self.implications = function implications(argv) {
        const implyFail = [];
        Object.keys(implied).forEach((key) => {
          const origKey = key;
          (implied[key] || []).forEach((value) => {
            let num;
            let key2 = origKey;
            const origValue = value;
            num = Number(key2);
            key2 = isNaN(num) ? key2 : num;
            if (typeof key2 === "number") {
              key2 = argv._.length >= key2;
            } else if (key2.match(/^--no-.+/)) {
              key2 = key2.match(/^--no-(.+)/)[1];
              key2 = !argv[key2];
            } else {
              key2 = argv[key2];
            }
            num = Number(value);
            value = isNaN(num) ? value : num;
            if (typeof value === "number") {
              value = argv._.length >= value;
            } else if (value.match(/^--no-.+/)) {
              value = value.match(/^--no-(.+)/)[1];
              value = !argv[value];
            } else {
              value = argv[value];
            }
            if (key2 && !value) {
              implyFail.push(` ${origKey} -> ${origValue}`);
            }
          });
        });
        if (implyFail.length) {
          let msg = `${__("Implications failed:")}
`;
          implyFail.forEach((value) => {
            msg += value;
          });
          usage.fail(msg);
        }
      };
      let conflicting = {};
      self.conflicts = function conflicts(key, value) {
        argsert("<string|object> [array|string]", [key, value], arguments.length);
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self.conflicts(k, key[k]);
          });
        } else {
          yargs.global(key);
          if (!conflicting[key]) {
            conflicting[key] = [];
          }
          if (Array.isArray(value)) {
            value.forEach((i) => self.conflicts(key, i));
          } else {
            conflicting[key].push(value);
          }
        }
      };
      self.getConflicting = () => conflicting;
      self.conflicting = function conflictingFn(argv) {
        Object.keys(argv).forEach((key) => {
          if (conflicting[key]) {
            conflicting[key].forEach((value) => {
              if (value && argv[key] !== void 0 && argv[value] !== void 0) {
                usage.fail(__("Arguments %s and %s are mutually exclusive", key, value));
              }
            });
          }
        });
      };
      self.recommendCommands = function recommendCommands(cmd, potentialCommands) {
        const distance = require_levenshtein();
        const threshold = 3;
        potentialCommands = potentialCommands.sort((a, b) => b.length - a.length);
        let recommended = null;
        let bestDistance = Infinity;
        for (let i = 0, candidate; (candidate = potentialCommands[i]) !== void 0; i++) {
          const d = distance(cmd, candidate);
          if (d <= threshold && d < bestDistance) {
            bestDistance = d;
            recommended = candidate;
          }
        }
        if (recommended)
          usage.fail(__("Did you mean %s?", recommended));
      };
      self.reset = function reset(localLookup) {
        implied = objFilter(implied, (k, v) => !localLookup[k]);
        conflicting = objFilter(conflicting, (k, v) => !localLookup[k]);
        checks = checks.filter((c) => c.global);
        return self;
      };
      let frozen;
      self.freeze = function freeze() {
        frozen = {};
        frozen.implied = implied;
        frozen.checks = checks;
        frozen.conflicting = conflicting;
      };
      self.unfreeze = function unfreeze() {
        implied = frozen.implied;
        checks = frozen.checks;
        conflicting = frozen.conflicting;
        frozen = void 0;
      };
      return self;
    };
  }
});

// ../../../node_modules/y18n/index.js
var require_y18n = __commonJS({
  "../../../node_modules/y18n/index.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var util = require_util();
    function Y18N(opts) {
      opts = opts || {};
      this.directory = opts.directory || "./locales";
      this.updateFiles = typeof opts.updateFiles === "boolean" ? opts.updateFiles : true;
      this.locale = opts.locale || "en";
      this.fallbackToLanguage = typeof opts.fallbackToLanguage === "boolean" ? opts.fallbackToLanguage : true;
      this.cache = /* @__PURE__ */ Object.create(null);
      this.writeQueue = [];
    }
    Y18N.prototype.__ = function() {
      if (typeof arguments[0] !== "string") {
        return this._taggedLiteral.apply(this, arguments);
      }
      var args = Array.prototype.slice.call(arguments);
      var str = args.shift();
      var cb = function() {
      };
      if (typeof args[args.length - 1] === "function")
        cb = args.pop();
      cb = cb || function() {
      };
      if (!this.cache[this.locale])
        this._readLocaleFile();
      if (!this.cache[this.locale][str] && this.updateFiles) {
        this.cache[this.locale][str] = str;
        this._enqueueWrite([this.directory, this.locale, cb]);
      } else {
        cb();
      }
      return util.format.apply(util, [this.cache[this.locale][str] || str].concat(args));
    };
    Y18N.prototype._taggedLiteral = function(parts) {
      var args = arguments;
      var str = "";
      parts.forEach(function(part, i) {
        var arg = args[i + 1];
        str += part;
        if (typeof arg !== "undefined") {
          str += "%s";
        }
      });
      return this.__.apply(null, [str].concat([].slice.call(arguments, 1)));
    };
    Y18N.prototype._enqueueWrite = function(work) {
      this.writeQueue.push(work);
      if (this.writeQueue.length === 1)
        this._processWriteQueue();
    };
    Y18N.prototype._processWriteQueue = function() {
      var _this = this;
      var work = this.writeQueue[0];
      var directory = work[0];
      var locale = work[1];
      var cb = work[2];
      var languageFile = this._resolveLocaleFile(directory, locale);
      var serializedLocale = JSON.stringify(this.cache[locale], null, 2);
      fs.writeFile(languageFile, serializedLocale, "utf-8", function(err) {
        _this.writeQueue.shift();
        if (_this.writeQueue.length > 0)
          _this._processWriteQueue();
        cb(err);
      });
    };
    Y18N.prototype._readLocaleFile = function() {
      var localeLookup = {};
      var languageFile = this._resolveLocaleFile(this.directory, this.locale);
      try {
        localeLookup = JSON.parse(fs.readFileSync(languageFile, "utf-8"));
      } catch (err) {
        if (err instanceof SyntaxError) {
          err.message = "syntax error in " + languageFile;
        }
        if (err.code === "ENOENT")
          localeLookup = {};
        else
          throw err;
      }
      this.cache[this.locale] = localeLookup;
    };
    Y18N.prototype._resolveLocaleFile = function(directory, locale) {
      var file = path.resolve(directory, "./", locale + ".json");
      if (this.fallbackToLanguage && !this._fileExistsSync(file) && ~locale.lastIndexOf("_")) {
        var languageFile = path.resolve(directory, "./", locale.split("_")[0] + ".json");
        if (this._fileExistsSync(languageFile))
          file = languageFile;
      }
      return file;
    };
    Y18N.prototype._fileExistsSync = function(file) {
      try {
        return fs.statSync(file).isFile();
      } catch (err) {
        return false;
      }
    };
    Y18N.prototype.__n = function() {
      var args = Array.prototype.slice.call(arguments);
      var singular = args.shift();
      var plural = args.shift();
      var quantity = args.shift();
      var cb = function() {
      };
      if (typeof args[args.length - 1] === "function")
        cb = args.pop();
      if (!this.cache[this.locale])
        this._readLocaleFile();
      var str = quantity === 1 ? singular : plural;
      if (this.cache[this.locale][singular]) {
        str = this.cache[this.locale][singular][quantity === 1 ? "one" : "other"];
      }
      if (!this.cache[this.locale][singular] && this.updateFiles) {
        this.cache[this.locale][singular] = {
          one: singular,
          other: plural
        };
        this._enqueueWrite([this.directory, this.locale, cb]);
      } else {
        cb();
      }
      var values = [str];
      if (~str.indexOf("%d"))
        values.push(quantity);
      return util.format.apply(util, values.concat(args));
    };
    Y18N.prototype.setLocale = function(locale) {
      this.locale = locale;
    };
    Y18N.prototype.getLocale = function() {
      return this.locale;
    };
    Y18N.prototype.updateLocale = function(obj) {
      if (!this.cache[this.locale])
        this._readLocaleFile();
      for (var key in obj) {
        this.cache[this.locale][key] = obj[key];
      }
    };
    module.exports = function(opts) {
      var y18n = new Y18N(opts);
      for (var key in y18n) {
        if (typeof y18n[key] === "function") {
          y18n[key] = y18n[key].bind(y18n);
        }
      }
      return y18n;
    };
  }
});

// ../../../node_modules/yargs/lib/apply-extends.js
var require_apply_extends = __commonJS({
  "../../../node_modules/yargs/lib/apply-extends.js"(exports, module) {
    "use strict";
    var fs = require_fs();
    var path = require_path();
    var YError = require_yerror();
    var previouslyVisitedConfigs = [];
    function checkForCircularExtends(cfgPath) {
      if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {
        throw new YError(`Circular extended configurations: '${cfgPath}'.`);
      }
    }
    function getPathToDefaultConfig(cwd, pathToExtend) {
      return path.resolve(cwd, pathToExtend);
    }
    function applyExtends(config, cwd) {
      let defaultConfig = {};
      if (config.hasOwnProperty("extends")) {
        if (typeof config.extends !== "string")
          return defaultConfig;
        const isPath = /\.json|\..*rc$/.test(config.extends);
        let pathToDefault = null;
        if (!isPath) {
          try {
            pathToDefault = __require.resolve(config.extends);
          } catch (err) {
          }
        } else {
          pathToDefault = getPathToDefaultConfig(cwd, config.extends);
        }
        if (!pathToDefault && !isPath)
          return config;
        checkForCircularExtends(pathToDefault);
        previouslyVisitedConfigs.push(pathToDefault);
        defaultConfig = isPath ? JSON.parse(fs.readFileSync(pathToDefault, "utf8")) : __require(config.extends);
        delete config.extends;
        defaultConfig = applyExtends(defaultConfig, path.dirname(pathToDefault));
      }
      previouslyVisitedConfigs = [];
      return Object.assign({}, defaultConfig, config);
    }
    module.exports = applyExtends;
  }
});

// ../../../node_modules/get-caller-file/index.js
var require_get_caller_file = __commonJS({
  "../../../node_modules/get-caller-file/index.js"(exports, module) {
    "use strict";
    module.exports = function getCallerFile(position) {
      if (position === void 0) {
        position = 2;
      }
      if (position >= Error.stackTraceLimit) {
        throw new TypeError("getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `" + position + "` and Error.stackTraceLimit was: `" + Error.stackTraceLimit + "`");
      }
      var oldPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = function(_, stack2) {
        return stack2;
      };
      var stack = new Error().stack;
      Error.prepareStackTrace = oldPrepareStackTrace;
      if (stack !== null && typeof stack === "object") {
        return stack[position] ? stack[position].getFileName() : void 0;
      }
    };
  }
});

// ../../../node_modules/yargs/node_modules/path-exists/index.js
var require_path_exists = __commonJS({
  "../../../node_modules/yargs/node_modules/path-exists/index.js"(exports, module) {
    "use strict";
    var fs = require_fs();
    module.exports = (fp) => new Promise((resolve) => {
      fs.access(fp, (err) => {
        resolve(!err);
      });
    });
    module.exports.sync = (fp) => {
      try {
        fs.accessSync(fp);
        return true;
      } catch (err) {
        return false;
      }
    };
  }
});

// ../../../node_modules/p-try/index.js
var require_p_try = __commonJS({
  "../../../node_modules/p-try/index.js"(exports, module) {
    "use strict";
    var pTry = (fn, ...arguments_) => new Promise((resolve) => {
      resolve(fn(...arguments_));
    });
    module.exports = pTry;
    module.exports.default = pTry;
  }
});

// ../../../node_modules/yargs/node_modules/p-limit/index.js
var require_p_limit = __commonJS({
  "../../../node_modules/yargs/node_modules/p-limit/index.js"(exports, module) {
    "use strict";
    var pTry = require_p_try();
    var pLimit = (concurrency) => {
      if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
        return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
      }
      const queue = [];
      let activeCount = 0;
      const next = () => {
        activeCount--;
        if (queue.length > 0) {
          queue.shift()();
        }
      };
      const run = (fn, resolve, ...args) => {
        activeCount++;
        const result = pTry(fn, ...args);
        resolve(result);
        result.then(next, next);
      };
      const enqueue = (fn, resolve, ...args) => {
        if (activeCount < concurrency) {
          run(fn, resolve, ...args);
        } else {
          queue.push(run.bind(null, fn, resolve, ...args));
        }
      };
      const generator = (fn, ...args) => new Promise((resolve) => enqueue(fn, resolve, ...args));
      Object.defineProperties(generator, {
        activeCount: {
          get: () => activeCount
        },
        pendingCount: {
          get: () => queue.length
        },
        clearQueue: {
          value: () => {
            queue.length = 0;
          }
        }
      });
      return generator;
    };
    module.exports = pLimit;
    module.exports.default = pLimit;
  }
});

// ../../../node_modules/yargs/node_modules/p-locate/index.js
var require_p_locate = __commonJS({
  "../../../node_modules/yargs/node_modules/p-locate/index.js"(exports, module) {
    "use strict";
    var pLimit = require_p_limit();
    var EndError = class extends Error {
      constructor(value) {
        super();
        this.value = value;
      }
    };
    var testElement = (el, tester) => Promise.resolve(el).then(tester);
    var finder = (el) => Promise.all(el).then((val) => val[1] === true && Promise.reject(new EndError(val[0])));
    module.exports = (iterable, tester, opts) => {
      opts = Object.assign({
        concurrency: Infinity,
        preserveOrder: true
      }, opts);
      const limit = pLimit(opts.concurrency);
      const items = [...iterable].map((el) => [el, limit(testElement, el, tester)]);
      const checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);
      return Promise.all(items.map((el) => checkLimit(finder, el))).then(() => {
      }).catch((err) => err instanceof EndError ? err.value : Promise.reject(err));
    };
  }
});

// ../../../node_modules/yargs/node_modules/locate-path/index.js
var require_locate_path = __commonJS({
  "../../../node_modules/yargs/node_modules/locate-path/index.js"(exports, module) {
    "use strict";
    var path = require_path();
    var pathExists = require_path_exists();
    var pLocate = require_p_locate();
    module.exports = (iterable, options) => {
      options = Object.assign({
        cwd: process.cwd()
      }, options);
      return pLocate(iterable, (el) => pathExists(path.resolve(options.cwd, el)), options);
    };
    module.exports.sync = (iterable, options) => {
      options = Object.assign({
        cwd: process.cwd()
      }, options);
      for (const el of iterable) {
        if (pathExists.sync(path.resolve(options.cwd, el))) {
          return el;
        }
      }
    };
  }
});

// ../../../node_modules/yargs/node_modules/find-up/index.js
var require_find_up = __commonJS({
  "../../../node_modules/yargs/node_modules/find-up/index.js"(exports, module) {
    "use strict";
    var path = require_path();
    var locatePath = require_locate_path();
    module.exports = (filename, opts = {}) => {
      const startDir = path.resolve(opts.cwd || "");
      const { root } = path.parse(startDir);
      const filenames = [].concat(filename);
      return new Promise((resolve) => {
        (function find(dir) {
          locatePath(filenames, { cwd: dir }).then((file) => {
            if (file) {
              resolve(path.join(dir, file));
            } else if (dir === root) {
              resolve(null);
            } else {
              find(path.dirname(dir));
            }
          });
        })(startDir);
      });
    };
    module.exports.sync = (filename, opts = {}) => {
      let dir = path.resolve(opts.cwd || "");
      const { root } = path.parse(dir);
      const filenames = [].concat(filename);
      while (true) {
        const file = locatePath.sync(filenames, { cwd: dir });
        if (file) {
          return path.join(dir, file);
        }
        if (dir === root) {
          return null;
        }
        dir = path.dirname(dir);
      }
    };
  }
});

// ../../../node_modules/require-main-filename/index.js
var require_require_main_filename = __commonJS({
  "../../../node_modules/require-main-filename/index.js"(exports, module) {
    module.exports = function(_require) {
      _require = _require || __require;
      var main = _require.main;
      if (main && isIISNode(main))
        return handleIISNode(main);
      else
        return main ? main.filename : process.cwd();
    };
    function isIISNode(main) {
      return /\\iisnode\\/.test(main.filename);
    }
    function handleIISNode(main) {
      if (!main.children.length) {
        return main.filename;
      } else {
        return main.children[0].filename;
      }
    }
  }
});

// ../../../node_modules/yargs/yargs.js
var require_yargs = __commonJS({
  "../../../node_modules/yargs/yargs.js"(exports, module) {
    "use strict";
    var argsert = require_argsert();
    var fs = require_fs();
    var Command = require_command();
    var Completion = require_completion();
    var Parser = require_yargs_parser();
    var path = require_path();
    var Usage = require_usage();
    var Validation = require_validation();
    var Y18n = require_y18n();
    var objFilter = require_obj_filter();
    var setBlocking = require_set_blocking();
    var applyExtends = require_apply_extends();
    var { globalMiddlewareFactory } = require_middleware();
    var YError = require_yerror();
    exports = module.exports = Yargs;
    function Yargs(processArgs, cwd, parentRequire) {
      processArgs = processArgs || [];
      const self = {};
      let command = null;
      let completion = null;
      let groups = {};
      let globalMiddleware = [];
      let output = "";
      let preservedGroups = {};
      let usage = null;
      let validation = null;
      const y18n = Y18n({
        directory: path.resolve(__dirname, "./locales"),
        updateFiles: false
      });
      self.middleware = globalMiddlewareFactory(globalMiddleware, self);
      if (!cwd)
        cwd = process.cwd();
      self.scriptName = function scriptName(scriptName) {
        self.$0 = scriptName;
        return self;
      };
      if (/\b(node|iojs|electron)(\.exe)?$/.test(process.argv[0])) {
        self.$0 = process.argv.slice(1, 2);
      } else {
        self.$0 = process.argv.slice(0, 1);
      }
      self.$0 = self.$0.map((x, i) => {
        const b = rebase(cwd, x);
        return x.match(/^(\/|([a-zA-Z]:)?\\)/) && b.length < x.length ? b : x;
      }).join(" ").trim();
      if (process.env._ !== void 0 && process.argv[1] === process.env._) {
        self.$0 = process.env._.replace(
          `${path.dirname(process.execPath)}/`,
          ""
        );
      }
      const context = { resets: -1, commands: [], fullCommands: [], files: [] };
      self.getContext = () => context;
      let options;
      self.resetOptions = self.reset = function resetOptions(aliases) {
        context.resets++;
        aliases = aliases || {};
        options = options || {};
        const tmpOptions = {};
        tmpOptions.local = options.local ? options.local : [];
        tmpOptions.configObjects = options.configObjects ? options.configObjects : [];
        const localLookup = {};
        tmpOptions.local.forEach((l) => {
          localLookup[l] = true;
          (aliases[l] || []).forEach((a) => {
            localLookup[a] = true;
          });
        });
        preservedGroups = Object.keys(groups).reduce((acc, groupName) => {
          const keys = groups[groupName].filter((key) => !(key in localLookup));
          if (keys.length > 0) {
            acc[groupName] = keys;
          }
          return acc;
        }, {});
        groups = {};
        const arrayOptions = [
          "array",
          "boolean",
          "string",
          "skipValidation",
          "count",
          "normalize",
          "number",
          "hiddenOptions"
        ];
        const objectOptions = [
          "narg",
          "key",
          "alias",
          "default",
          "defaultDescription",
          "config",
          "choices",
          "demandedOptions",
          "demandedCommands",
          "coerce"
        ];
        arrayOptions.forEach((k) => {
          tmpOptions[k] = (options[k] || []).filter((k2) => !localLookup[k2]);
        });
        objectOptions.forEach((k) => {
          tmpOptions[k] = objFilter(options[k], (k2, v) => !localLookup[k2]);
        });
        tmpOptions.envPrefix = options.envPrefix;
        options = tmpOptions;
        usage = usage ? usage.reset(localLookup) : Usage(self, y18n);
        validation = validation ? validation.reset(localLookup) : Validation(self, usage, y18n);
        command = command ? command.reset() : Command(self, usage, validation, globalMiddleware);
        if (!completion)
          completion = Completion(self, usage, command);
        completionCommand = null;
        output = "";
        exitError = null;
        hasOutput = false;
        self.parsed = false;
        return self;
      };
      self.resetOptions();
      let frozen;
      function freeze() {
        frozen = {};
        frozen.options = options;
        frozen.configObjects = options.configObjects.slice(0);
        frozen.exitProcess = exitProcess;
        frozen.groups = groups;
        usage.freeze();
        validation.freeze();
        command.freeze();
        frozen.strict = strict;
        frozen.completionCommand = completionCommand;
        frozen.output = output;
        frozen.exitError = exitError;
        frozen.hasOutput = hasOutput;
        frozen.parsed = self.parsed;
      }
      function unfreeze() {
        options = frozen.options;
        options.configObjects = frozen.configObjects;
        exitProcess = frozen.exitProcess;
        groups = frozen.groups;
        output = frozen.output;
        exitError = frozen.exitError;
        hasOutput = frozen.hasOutput;
        self.parsed = frozen.parsed;
        usage.unfreeze();
        validation.unfreeze();
        command.unfreeze();
        strict = frozen.strict;
        completionCommand = frozen.completionCommand;
        parseFn = null;
        parseContext = null;
        frozen = void 0;
      }
      self.boolean = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("boolean", keys);
        return self;
      };
      self.array = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("array", keys);
        return self;
      };
      self.number = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("number", keys);
        return self;
      };
      self.normalize = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("normalize", keys);
        return self;
      };
      self.count = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("count", keys);
        return self;
      };
      self.string = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("string", keys);
        return self;
      };
      self.requiresArg = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintObject(self.nargs, false, "narg", keys, 1);
        return self;
      };
      self.skipValidation = function(keys) {
        argsert("<array|string>", [keys], arguments.length);
        populateParserHintArray("skipValidation", keys);
        return self;
      };
      function populateParserHintArray(type, keys, value) {
        keys = [].concat(keys);
        keys.forEach((key) => {
          key = sanitizeKey(key);
          options[type].push(key);
        });
      }
      self.nargs = function(key, value) {
        argsert("<string|object|array> [number]", [key, value], arguments.length);
        populateParserHintObject(self.nargs, false, "narg", key, value);
        return self;
      };
      self.choices = function(key, value) {
        argsert("<object|string|array> [string|array]", [key, value], arguments.length);
        populateParserHintObject(self.choices, true, "choices", key, value);
        return self;
      };
      self.alias = function(key, value) {
        argsert("<object|string|array> [string|array]", [key, value], arguments.length);
        populateParserHintObject(self.alias, true, "alias", key, value);
        return self;
      };
      self.default = self.defaults = function(key, value, defaultDescription) {
        argsert("<object|string|array> [*] [string]", [key, value, defaultDescription], arguments.length);
        if (defaultDescription)
          options.defaultDescription[key] = defaultDescription;
        if (typeof value === "function") {
          if (!options.defaultDescription[key])
            options.defaultDescription[key] = usage.functionDescription(value);
          value = value.call();
        }
        populateParserHintObject(self.default, false, "default", key, value);
        return self;
      };
      self.describe = function(key, desc) {
        argsert("<object|string|array> [string]", [key, desc], arguments.length);
        populateParserHintObject(self.describe, false, "key", key, true);
        usage.describe(key, desc);
        return self;
      };
      self.demandOption = function(keys, msg) {
        argsert("<object|string|array> [string]", [keys, msg], arguments.length);
        populateParserHintObject(self.demandOption, false, "demandedOptions", keys, msg);
        return self;
      };
      self.coerce = function(keys, value) {
        argsert("<object|string|array> [function]", [keys, value], arguments.length);
        populateParserHintObject(self.coerce, false, "coerce", keys, value);
        return self;
      };
      function populateParserHintObject(builder, isArray, type, key, value) {
        if (Array.isArray(key)) {
          const temp = /* @__PURE__ */ Object.create(null);
          key.forEach((k) => {
            temp[k] = value;
          });
          builder(temp);
        } else if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            builder(k, key[k]);
          });
        } else {
          key = sanitizeKey(key);
          if (isArray) {
            options[type][key] = (options[type][key] || []).concat(value);
          } else {
            options[type][key] = value;
          }
        }
      }
      function sanitizeKey(key) {
        if (key === "__proto__")
          return "___proto___";
        return key;
      }
      function deleteFromParserHintObject(optionKey) {
        Object.keys(options).forEach((hintKey) => {
          const hint = options[hintKey];
          if (Array.isArray(hint)) {
            if (~hint.indexOf(optionKey))
              hint.splice(hint.indexOf(optionKey), 1);
          } else if (typeof hint === "object") {
            delete hint[optionKey];
          }
        });
        delete usage.getDescriptions()[optionKey];
      }
      self.config = function config(key, msg, parseFn2) {
        argsert("[object|string] [string|function] [function]", [key, msg, parseFn2], arguments.length);
        if (typeof key === "object") {
          key = applyExtends(key, cwd);
          options.configObjects = (options.configObjects || []).concat(key);
          return self;
        }
        if (typeof msg === "function") {
          parseFn2 = msg;
          msg = null;
        }
        key = key || "config";
        self.describe(key, msg || usage.deferY18nLookup("Path to JSON config file"));
        (Array.isArray(key) ? key : [key]).forEach((k) => {
          options.config[k] = parseFn2 || true;
        });
        return self;
      };
      self.example = function(cmd, description) {
        argsert("<string> [string]", [cmd, description], arguments.length);
        usage.example(cmd, description);
        return self;
      };
      self.command = function(cmd, description, builder, handler, middlewares) {
        argsert("<string|array|object> [string|boolean] [function|object] [function] [array]", [cmd, description, builder, handler, middlewares], arguments.length);
        command.addHandler(cmd, description, builder, handler, middlewares);
        return self;
      };
      self.commandDir = function(dir, opts) {
        argsert("<string> [object]", [dir, opts], arguments.length);
        const req = parentRequire || __require;
        command.addDirectory(dir, self.getContext(), req, require_get_caller_file()(), opts);
        return self;
      };
      self.demand = self.required = self.require = function demand(keys, max, msg) {
        if (Array.isArray(max)) {
          max.forEach((key) => {
            self.demandOption(key, msg);
          });
          max = Infinity;
        } else if (typeof max !== "number") {
          msg = max;
          max = Infinity;
        }
        if (typeof keys === "number") {
          self.demandCommand(keys, max, msg, msg);
        } else if (Array.isArray(keys)) {
          keys.forEach((key) => {
            self.demandOption(key, msg);
          });
        } else {
          if (typeof msg === "string") {
            self.demandOption(keys, msg);
          } else if (msg === true || typeof msg === "undefined") {
            self.demandOption(keys);
          }
        }
        return self;
      };
      self.demandCommand = function demandCommand(min, max, minMsg, maxMsg) {
        argsert("[number] [number|string] [string|null|undefined] [string|null|undefined]", [min, max, minMsg, maxMsg], arguments.length);
        if (typeof min === "undefined")
          min = 1;
        if (typeof max !== "number") {
          minMsg = max;
          max = Infinity;
        }
        self.global("_", false);
        options.demandedCommands._ = {
          min,
          max,
          minMsg,
          maxMsg
        };
        return self;
      };
      self.getDemandedOptions = () => {
        argsert([], 0);
        return options.demandedOptions;
      };
      self.getDemandedCommands = () => {
        argsert([], 0);
        return options.demandedCommands;
      };
      self.implies = function(key, value) {
        argsert("<string|object> [number|string|array]", [key, value], arguments.length);
        validation.implies(key, value);
        return self;
      };
      self.conflicts = function(key1, key2) {
        argsert("<string|object> [string|array]", [key1, key2], arguments.length);
        validation.conflicts(key1, key2);
        return self;
      };
      self.usage = function(msg, description, builder, handler) {
        argsert("<string|null|undefined> [string|boolean] [function|object] [function]", [msg, description, builder, handler], arguments.length);
        if (description !== void 0) {
          if ((msg || "").match(/^\$0( |$)/)) {
            return self.command(msg, description, builder, handler);
          } else {
            throw new YError(".usage() description must start with $0 if being used as alias for .command()");
          }
        } else {
          usage.usage(msg);
          return self;
        }
      };
      self.epilogue = self.epilog = function(msg) {
        argsert("<string>", [msg], arguments.length);
        usage.epilog(msg);
        return self;
      };
      self.fail = function(f) {
        argsert("<function>", [f], arguments.length);
        usage.failFn(f);
        return self;
      };
      self.check = function(f, _global) {
        argsert("<function> [boolean]", [f, _global], arguments.length);
        validation.check(f, _global !== false);
        return self;
      };
      self.global = function global(globals, global) {
        argsert("<string|array> [boolean]", [globals, global], arguments.length);
        globals = [].concat(globals);
        if (global !== false) {
          options.local = options.local.filter((l) => globals.indexOf(l) === -1);
        } else {
          globals.forEach((g) => {
            if (options.local.indexOf(g) === -1)
              options.local.push(g);
          });
        }
        return self;
      };
      self.pkgConf = function pkgConf(key, rootPath) {
        argsert("<string> [string]", [key, rootPath], arguments.length);
        let conf = null;
        const obj = pkgUp(rootPath || cwd);
        if (obj[key] && typeof obj[key] === "object") {
          conf = applyExtends(obj[key], rootPath || cwd);
          options.configObjects = (options.configObjects || []).concat(conf);
        }
        return self;
      };
      const pkgs = {};
      function pkgUp(rootPath) {
        const npath = rootPath || "*";
        if (pkgs[npath])
          return pkgs[npath];
        const findUp = require_find_up();
        let obj = {};
        try {
          let startDir = rootPath || require_require_main_filename()(parentRequire || __require);
          if (!rootPath && path.extname(startDir)) {
            startDir = path.dirname(startDir);
          }
          const pkgJsonPath = findUp.sync("package.json", {
            cwd: startDir
          });
          obj = JSON.parse(fs.readFileSync(pkgJsonPath));
        } catch (noop) {
        }
        pkgs[npath] = obj || {};
        return pkgs[npath];
      }
      let parseFn = null;
      let parseContext = null;
      self.parse = function parse(args, shortCircuit, _parseFn) {
        argsert("[string|array] [function|boolean|object] [function]", [args, shortCircuit, _parseFn], arguments.length);
        if (typeof args === "undefined") {
          return self._parseArgs(processArgs);
        }
        if (typeof shortCircuit === "object") {
          parseContext = shortCircuit;
          shortCircuit = _parseFn;
        }
        if (typeof shortCircuit === "function") {
          parseFn = shortCircuit;
          shortCircuit = null;
        }
        if (!shortCircuit)
          processArgs = args;
        freeze();
        if (parseFn)
          exitProcess = false;
        const parsed = self._parseArgs(args, shortCircuit);
        if (parseFn)
          parseFn(exitError, parsed, output);
        unfreeze();
        return parsed;
      };
      self._getParseContext = () => parseContext || {};
      self._hasParseCallback = () => !!parseFn;
      self.option = self.options = function option(key, opt) {
        argsert("<string|object> [object]", [key, opt], arguments.length);
        if (typeof key === "object") {
          Object.keys(key).forEach((k) => {
            self.options(k, key[k]);
          });
        } else {
          if (typeof opt !== "object") {
            opt = {};
          }
          options.key[key] = true;
          if (opt.alias)
            self.alias(key, opt.alias);
          const demand = opt.demand || opt.required || opt.require;
          if (demand) {
            self.demand(key, demand);
          }
          if (opt.demandOption) {
            self.demandOption(key, typeof opt.demandOption === "string" ? opt.demandOption : void 0);
          }
          if ("conflicts" in opt) {
            self.conflicts(key, opt.conflicts);
          }
          if ("default" in opt) {
            self.default(key, opt.default);
          }
          if ("implies" in opt) {
            self.implies(key, opt.implies);
          }
          if ("nargs" in opt) {
            self.nargs(key, opt.nargs);
          }
          if (opt.config) {
            self.config(key, opt.configParser);
          }
          if (opt.normalize) {
            self.normalize(key);
          }
          if ("choices" in opt) {
            self.choices(key, opt.choices);
          }
          if ("coerce" in opt) {
            self.coerce(key, opt.coerce);
          }
          if ("group" in opt) {
            self.group(key, opt.group);
          }
          if (opt.boolean || opt.type === "boolean") {
            self.boolean(key);
            if (opt.alias)
              self.boolean(opt.alias);
          }
          if (opt.array || opt.type === "array") {
            self.array(key);
            if (opt.alias)
              self.array(opt.alias);
          }
          if (opt.number || opt.type === "number") {
            self.number(key);
            if (opt.alias)
              self.number(opt.alias);
          }
          if (opt.string || opt.type === "string") {
            self.string(key);
            if (opt.alias)
              self.string(opt.alias);
          }
          if (opt.count || opt.type === "count") {
            self.count(key);
          }
          if (typeof opt.global === "boolean") {
            self.global(key, opt.global);
          }
          if (opt.defaultDescription) {
            options.defaultDescription[key] = opt.defaultDescription;
          }
          if (opt.skipValidation) {
            self.skipValidation(key);
          }
          const desc = opt.describe || opt.description || opt.desc;
          self.describe(key, desc);
          if (opt.hidden) {
            self.hide(key);
          }
          if (opt.requiresArg) {
            self.requiresArg(key);
          }
        }
        return self;
      };
      self.getOptions = () => options;
      self.positional = function(key, opts) {
        argsert("<string> <object>", [key, opts], arguments.length);
        if (context.resets === 0) {
          throw new YError(".positional() can only be called in a command's builder function");
        }
        const supportedOpts = [
          "default",
          "defaultDescription",
          "implies",
          "normalize",
          "choices",
          "conflicts",
          "coerce",
          "type",
          "describe",
          "desc",
          "description",
          "alias"
        ];
        opts = objFilter(opts, (k, v) => {
          let accept = supportedOpts.indexOf(k) !== -1;
          if (k === "type" && ["string", "number", "boolean"].indexOf(v) === -1)
            accept = false;
          return accept;
        });
        const fullCommand = context.fullCommands[context.fullCommands.length - 1];
        const parseOptions = fullCommand ? command.cmdToParseOptions(fullCommand) : {
          array: [],
          alias: {},
          default: {},
          demand: {}
        };
        Object.keys(parseOptions).forEach((pk) => {
          if (Array.isArray(parseOptions[pk])) {
            if (parseOptions[pk].indexOf(key) !== -1)
              opts[pk] = true;
          } else {
            if (parseOptions[pk][key] && !(pk in opts))
              opts[pk] = parseOptions[pk][key];
          }
        });
        self.group(key, usage.getPositionalGroupName());
        return self.option(key, opts);
      };
      self.group = function group(opts, groupName) {
        argsert("<string|array> <string>", [opts, groupName], arguments.length);
        const existing = preservedGroups[groupName] || groups[groupName];
        if (preservedGroups[groupName]) {
          delete preservedGroups[groupName];
        }
        const seen = {};
        groups[groupName] = (existing || []).concat(opts).filter((key) => {
          if (seen[key])
            return false;
          return seen[key] = true;
        });
        return self;
      };
      self.getGroups = () => Object.assign({}, groups, preservedGroups);
      self.env = function(prefix) {
        argsert("[string|boolean]", [prefix], arguments.length);
        if (prefix === false)
          options.envPrefix = void 0;
        else
          options.envPrefix = prefix || "";
        return self;
      };
      self.wrap = function(cols) {
        argsert("<number|null|undefined>", [cols], arguments.length);
        usage.wrap(cols);
        return self;
      };
      let strict = false;
      self.strict = function(enabled) {
        argsert("[boolean]", [enabled], arguments.length);
        strict = enabled !== false;
        return self;
      };
      self.getStrict = () => strict;
      let parserConfig = {};
      self.parserConfiguration = function parserConfiguration(config) {
        argsert("<object>", [config], arguments.length);
        parserConfig = config;
        return self;
      };
      self.getParserConfiguration = () => parserConfig;
      self.showHelp = function(level) {
        argsert("[string|function]", [level], arguments.length);
        if (!self.parsed)
          self._parseArgs(processArgs);
        if (command.hasDefaultCommand()) {
          context.resets++;
          command.runDefaultBuilderOn(self, true);
        }
        usage.showHelp(level);
        return self;
      };
      let versionOpt = null;
      self.version = function version(opt, msg, ver) {
        const defaultVersionOpt = "version";
        argsert("[boolean|string] [string] [string]", [opt, msg, ver], arguments.length);
        if (versionOpt) {
          deleteFromParserHintObject(versionOpt);
          usage.version(void 0);
          versionOpt = null;
        }
        if (arguments.length === 0) {
          ver = guessVersion();
          opt = defaultVersionOpt;
        } else if (arguments.length === 1) {
          if (opt === false) {
            return self;
          }
          ver = opt;
          opt = defaultVersionOpt;
        } else if (arguments.length === 2) {
          ver = msg;
          msg = null;
        }
        versionOpt = typeof opt === "string" ? opt : defaultVersionOpt;
        msg = msg || usage.deferY18nLookup("Show version number");
        usage.version(ver || void 0);
        self.boolean(versionOpt);
        self.describe(versionOpt, msg);
        return self;
      };
      function guessVersion() {
        const obj = pkgUp();
        return obj.version || "unknown";
      }
      let helpOpt = null;
      self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {
        const defaultHelpOpt = "help";
        argsert("[string|boolean] [string]", [opt, msg], arguments.length);
        if (helpOpt) {
          deleteFromParserHintObject(helpOpt);
          helpOpt = null;
        }
        if (arguments.length === 1) {
          if (opt === false)
            return self;
        }
        helpOpt = typeof opt === "string" ? opt : defaultHelpOpt;
        self.boolean(helpOpt);
        self.describe(helpOpt, msg || usage.deferY18nLookup("Show help"));
        return self;
      };
      const defaultShowHiddenOpt = "show-hidden";
      options.showHiddenOpt = defaultShowHiddenOpt;
      self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {
        argsert("[string|boolean] [string]", [opt, msg], arguments.length);
        if (arguments.length === 1) {
          if (opt === false)
            return self;
        }
        const showHiddenOpt = typeof opt === "string" ? opt : defaultShowHiddenOpt;
        self.boolean(showHiddenOpt);
        self.describe(showHiddenOpt, msg || usage.deferY18nLookup("Show hidden options"));
        options.showHiddenOpt = showHiddenOpt;
        return self;
      };
      self.hide = function hide(key) {
        argsert("<string|object>", [key], arguments.length);
        options.hiddenOptions.push(key);
        return self;
      };
      self.showHelpOnFail = function showHelpOnFail(enabled, message) {
        argsert("[boolean|string] [string]", [enabled, message], arguments.length);
        usage.showHelpOnFail(enabled, message);
        return self;
      };
      var exitProcess = true;
      self.exitProcess = function(enabled) {
        argsert("[boolean]", [enabled], arguments.length);
        if (typeof enabled !== "boolean") {
          enabled = true;
        }
        exitProcess = enabled;
        return self;
      };
      self.getExitProcess = () => exitProcess;
      var completionCommand = null;
      self.completion = function(cmd, desc, fn) {
        argsert("[string] [string|boolean|function] [function]", [cmd, desc, fn], arguments.length);
        if (typeof desc === "function") {
          fn = desc;
          desc = null;
        }
        completionCommand = cmd || "completion";
        if (!desc && desc !== false) {
          desc = "generate completion script";
        }
        self.command(completionCommand, desc);
        if (fn)
          completion.registerFunction(fn);
        return self;
      };
      self.showCompletionScript = function($0) {
        argsert("[string]", [$0], arguments.length);
        $0 = $0 || self.$0;
        _logger.log(completion.generateCompletionScript($0, completionCommand));
        return self;
      };
      self.getCompletion = function(args, done) {
        argsert("<array> <function>", [args, done], arguments.length);
        completion.getCompletion(args, done);
      };
      self.locale = function(locale) {
        argsert("[string]", [locale], arguments.length);
        if (arguments.length === 0) {
          guessLocale();
          return y18n.getLocale();
        }
        detectLocale = false;
        y18n.setLocale(locale);
        return self;
      };
      self.updateStrings = self.updateLocale = function(obj) {
        argsert("<object>", [obj], arguments.length);
        detectLocale = false;
        y18n.updateLocale(obj);
        return self;
      };
      let detectLocale = true;
      self.detectLocale = function(detect) {
        argsert("<boolean>", [detect], arguments.length);
        detectLocale = detect;
        return self;
      };
      self.getDetectLocale = () => detectLocale;
      var hasOutput = false;
      var exitError = null;
      self.exit = (code, err) => {
        hasOutput = true;
        exitError = err;
        if (exitProcess)
          process.exit(code);
      };
      const _logger = {
        log() {
          const args = [];
          for (let i = 0; i < arguments.length; i++)
            args.push(arguments[i]);
          if (!self._hasParseCallback())
            console.log.apply(console, args);
          hasOutput = true;
          if (output.length)
            output += "\n";
          output += args.join(" ");
        },
        error() {
          const args = [];
          for (let i = 0; i < arguments.length; i++)
            args.push(arguments[i]);
          if (!self._hasParseCallback())
            console.error.apply(console, args);
          hasOutput = true;
          if (output.length)
            output += "\n";
          output += args.join(" ");
        }
      };
      self._getLoggerInstance = () => _logger;
      self._hasOutput = () => hasOutput;
      self._setHasOutput = () => {
        hasOutput = true;
      };
      let recommendCommands;
      self.recommendCommands = function(recommend) {
        argsert("[boolean]", [recommend], arguments.length);
        recommendCommands = typeof recommend === "boolean" ? recommend : true;
        return self;
      };
      self.getUsageInstance = () => usage;
      self.getValidationInstance = () => validation;
      self.getCommandInstance = () => command;
      self.terminalWidth = () => {
        argsert([], 0);
        return typeof process.stdout.columns !== "undefined" ? process.stdout.columns : null;
      };
      Object.defineProperty(self, "argv", {
        get: () => self._parseArgs(processArgs),
        enumerable: true
      });
      self._parseArgs = function parseArgs(args, shortCircuit, _skipValidation, commandIndex) {
        let skipValidation = !!_skipValidation;
        args = args || processArgs;
        options.__ = y18n.__;
        options.configuration = self.getParserConfiguration();
        let pkgConfig = pkgUp()["yargs"];
        if (pkgConfig) {
          console.warn("Configuring yargs through package.json is deprecated and will be removed in the next major release, please use the JS API instead.");
          options.configuration = Object.assign({}, pkgConfig, options.configuration);
        }
        const parsed = Parser.detailed(args, options);
        let argv = parsed.argv;
        if (parseContext)
          argv = Object.assign({}, argv, parseContext);
        const aliases = parsed.aliases;
        argv.$0 = self.$0;
        self.parsed = parsed;
        try {
          guessLocale();
          if (shortCircuit) {
            return argv;
          }
          if (helpOpt) {
            const helpCmds = [helpOpt].concat(aliases[helpOpt] || []).filter((k) => k.length > 1);
            if (~helpCmds.indexOf(argv._[argv._.length - 1])) {
              argv._.pop();
              argv[helpOpt] = true;
            }
          }
          const handlerKeys = command.getCommands();
          const requestCompletions = completion.completionKey in argv;
          const skipRecommendation = argv[helpOpt] || requestCompletions;
          const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== "$0");
          if (argv._.length) {
            if (handlerKeys.length) {
              let firstUnknownCommand;
              for (let i = commandIndex || 0, cmd; argv._[i] !== void 0; i++) {
                cmd = String(argv._[i]);
                if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {
                  return command.runCommand(cmd, self, parsed, i + 1);
                } else if (!firstUnknownCommand && cmd !== completionCommand) {
                  firstUnknownCommand = cmd;
                  break;
                }
              }
              if (command.hasDefaultCommand() && !skipDefaultCommand) {
                return command.runCommand(null, self, parsed);
              }
              if (recommendCommands && firstUnknownCommand && !skipRecommendation) {
                validation.recommendCommands(firstUnknownCommand, handlerKeys);
              }
            }
            if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {
              if (exitProcess)
                setBlocking(true);
              self.showCompletionScript();
              self.exit(0);
            }
          } else if (command.hasDefaultCommand() && !skipDefaultCommand) {
            return command.runCommand(null, self, parsed);
          }
          if (requestCompletions) {
            if (exitProcess)
              setBlocking(true);
            const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1);
            completion.getCompletion(completionArgs, (completions) => {
              ;
              (completions || []).forEach((completion2) => {
                _logger.log(completion2);
              });
              self.exit(0);
            });
            return argv;
          }
          if (!hasOutput) {
            Object.keys(argv).forEach((key) => {
              if (key === helpOpt && argv[key]) {
                if (exitProcess)
                  setBlocking(true);
                skipValidation = true;
                self.showHelp("log");
                self.exit(0);
              } else if (key === versionOpt && argv[key]) {
                if (exitProcess)
                  setBlocking(true);
                skipValidation = true;
                usage.showVersion();
                self.exit(0);
              }
            });
          }
          if (!skipValidation && options.skipValidation.length > 0) {
            skipValidation = Object.keys(argv).some((key) => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);
          }
          if (!skipValidation) {
            if (parsed.error)
              throw new YError(parsed.error.message);
            if (!requestCompletions) {
              self._runValidation(argv, aliases, {}, parsed.error);
            }
          }
        } catch (err) {
          if (err instanceof YError)
            usage.fail(err.message, err);
          else
            throw err;
        }
        return argv;
      };
      self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors) {
        if (parseErrors)
          throw new YError(parseErrors.message || parseErrors);
        validation.nonOptionCount(argv);
        validation.requiredArguments(argv);
        if (strict)
          validation.unknownArguments(argv, aliases, positionalMap);
        validation.customChecks(argv, aliases);
        validation.limitedChoices(argv);
        validation.implications(argv);
        validation.conflicting(argv);
      };
      function guessLocale() {
        if (!detectLocale)
          return;
        try {
          const { env } = process;
          const locale = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE || "en_US";
          self.locale(locale.replace(/[.:].*/, ""));
        } catch (err) {
        }
      }
      self.help();
      self.version();
      return self;
    }
    exports.rebase = rebase;
    function rebase(base, dir) {
      return path.relative(base, dir);
    }
  }
});

// ../../../node_modules/yargs/index.js
var require_yargs2 = __commonJS({
  "../../../node_modules/yargs/index.js"(exports, module) {
    var yargs = require_yargs();
    Argv(process.argv.slice(2));
    module.exports = Argv;
    function Argv(processArgs, cwd) {
      const argv = yargs(processArgs, cwd, __require);
      singletonify(argv);
      return argv;
    }
    function singletonify(inst) {
      Object.keys(inst).forEach((key) => {
        if (key === "argv") {
          Argv.__defineGetter__(key, inst.__lookupGetter__(key));
        } else {
          Argv[key] = typeof inst[key] === "function" ? inst[key].bind(inst) : inst[key];
        }
      });
    }
  }
});
export default require_yargs2();
//# sourceMappingURL=yargs.js.map
